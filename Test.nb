(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 11.0' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       158,          7]
NotebookDataLength[    249425,       4722]
NotebookOptionsPosition[    249081,       4706]
NotebookOutlinePosition[    249430,       4721]
CellTagsIndexPosition[    249387,       4718]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{

Cell[CellGroupData[{
Cell[BoxData[
 NamespaceBox["WolframAlphaQueryResults",
  DynamicModuleBox[{Typeset`q$$ = "y'' + y' = 1/4", Typeset`opts$$ = {
   AppearanceElements -> {
     "Extrusion", "Warnings", "Assumptions", "Pods", "Unsuccessful"}, 
    Asynchronous -> All, 
    Method -> {
     "ExtrusionChosen" -> {
       "DifferentialEquationSolution", "Differential equation solutions", 2, 
        2, "Content"}, "ExtrusionOpen" -> True, 
      "Formats" -> {"cell", "minput", "moutput", "msound", "dataformats"}}, 
    PodStates -> {"DifferentialEquationSolution__Step-by-step solution"}}, 
   Typeset`elements$$ = {
   "Extrusion", "Warnings", "Assumptions", "Pods", "Unsuccessful"}, 
   Typeset`pod1$$ = XMLElement[
   "pod", {"title" -> "Input", "scanner" -> "Identity", "id" -> "Input", 
     "position" -> "100", "error" -> "false", "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"y''[x] + y'[x] == 1/4"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             RowBox[{
               RowBox[{
                 RowBox[{
                   SuperscriptBox[
                   "y", "\[Prime]\[Prime]", MultilineFunction -> None], "(", 
                   "x", ")"}], "+", 
                 RowBox[{
                   SuperscriptBox["y", "\[Prime]", MultilineFunction -> None],
                    "(", "x", ")"}]}], "\[LongEqual]", 
               TagBox[
                FractionBox["1", "4"], Identity]}], 
             PolynomialForm[#, TraditionalOrder -> False]& ], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          CellSize -> {550, Automatic}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,computabledata,formatteddata,formuladata"}]}]}], 
   Typeset`pod2$$ = XMLElement[
   "pod", {"title" -> "Autonomous equation", "scanner" -> "ODE", "id" -> 
     "AutonomousEquation", "position" -> "200", "error" -> "false", 
     "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             TagBox[
              RowBox[{
                RowBox[{
                  SuperscriptBox[
                  "y", "\[Prime]\[Prime]", MultilineFunction -> None], "(", 
                  "x", ")"}], "\[LongEqual]", 
                RowBox[{
                  FractionBox["1", "4"], "-", 
                  RowBox[{
                    SuperscriptBox[
                    "y", "\[Prime]", MultilineFunction -> None], "(", "x", 
                    ")"}]}]}], HoldForm], 
             PolynomialForm[#, TraditionalOrder -> False]& ], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          CellSize -> {550, Automatic}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,computabledata,formatteddata,formuladata"}]}], 
     XMLElement["infos", {"count" -> "1"}, {
       XMLElement["info", {}, {
         XMLElement[
         "link", {
          "url" -> "http://mathworld.wolfram.com/Autonomous.html", "text" -> 
           "Autonomous equation"}, {}]}]}]}], Typeset`pod3$$ = XMLElement[
   "pod", {"title" -> "ODE classification", "scanner" -> "ODE", "id" -> 
     "ODEClassification", "position" -> "300", "error" -> "false", 
     "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
           "\"second\[Hyphen]order linear ordinary differential equation\"", 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          CellSize -> {550, Automatic}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {"plaintext,computabledata,formatteddata"}]}]}], 
   Typeset`pod4$$ = XMLElement[
   "pod", {"title" -> "Alternate form", "scanner" -> "Simplification", "id" -> 
     "AlternateForm", "position" -> "400", "error" -> "false", "numsubpods" -> 
     "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["moutput", {}, {"y''[x] == 1/4 - y'[x]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            RowBox[{
              RowBox[{
                SuperscriptBox[
                "y", "\[Prime]\[Prime]", MultilineFunction -> None], "(", "x",
                 ")"}], "\[LongEqual]", 
              RowBox[{
                FractionBox["1", "4"], "-", 
                RowBox[{
                  SuperscriptBox["y", "\[Prime]", MultilineFunction -> None], 
                  "(", "x", ")"}]}]}], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          CellSize -> {550, Automatic}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,moutput,computabledata,formatteddata,formuladata"}]}]}], 
   Typeset`pod5$$ = XMLElement[
   "pod", {"title" -> "Differential equation solutions", "scanner" -> "ODE", 
     "id" -> "DifferentialEquationSolution", "position" -> "100", "error" -> 
     "false", "numsubpods" -> "2", "primary" -> "true"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"DSolve[{y'[x] + y''[x] == 1/4}, y[x], x]"}], 
       XMLElement[
       "moutput", {}, {
        "{y[x] == x/4 + Subscript[c, 1]/E^x + Subscript[c, 2]}"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            RowBox[{
              RowBox[{"y", "(", "x", ")"}], "\[LongEqual]", 
              RowBox[{
                RowBox[{
                  SubscriptBox["c", "1"], " ", 
                  SuperscriptBox["\[ExponentialE]", 
                   RowBox[{"-", "x"}]]}], "+", 
                SubscriptBox["c", "2"], "+", 
                FractionBox["x", "4"]}]}], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          CellSize -> {550, Automatic}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata,formuladata"}]}\
], 
     XMLElement["subpod", {"title" -> "Possible intermediate steps"}, {
       XMLElement["cell", {"compressed" -> True, "string" -> False}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             GridBox[{{
                StyleBox[
                 StyleBox[
                  TemplateBox[{"\[NoBreak]", "\"\[NoBreak]\"", 
                    TemplateBox[{
                    FormBox[
                    TagBox[
                    FormBox[
                    TemplateBox[{"\"Solve \"", 
                    TemplateBox[{
                    StyleBox[
                    InterpretationBox[
                    Cell[
                    BoxData[
                    FormBox[
                    RowBox[{
                    TagBox[
                    RowBox[{
                    TagBox[
                    FractionBox[
                    RowBox[{
                    SuperscriptBox["\[DifferentialD]", "2"], 
                    RowBox[{"y", "(", "x", ")"}]}], 
                    RowBox[{"\[DifferentialD]", 
                    SuperscriptBox["x", "2"]}], MultilineFunction -> None], 
                    HoldForm], "+", 
                    TagBox[
                    FractionBox[
                    RowBox[{"\[DifferentialD]", 
                    RowBox[{"y", "(", "x", ")"}]}], 
                    RowBox[{"\[DifferentialD]", "x"}], MultilineFunction -> 
                    None], HoldForm]}], HoldForm], "\[LongEqual]", 
                    FractionBox["1", "4"]}], TraditionalForm]]], 
                    ExpressionCell[
                    CalculateScan`StepByStepMath`StepByStepDSolve`Private`\
MyPlus[
                    
                    CalculateScan`StepByStepMath`\
StepByStepMathCommonFunctions`mathWrapper[
                    Dt[
                    $CellContext`y[$CellContext`x], {$CellContext`x, 2}]], 
                    
                    CalculateScan`StepByStepMath`\
StepByStepMathCommonFunctions`mathWrapper[
                    Dt[
                    $CellContext`y[$CellContext`x], $CellContext`x]]] == 
                    Rational[1, 4]]], FontColor -> GrayLevel[0], StripOnInput -> 
                    False]}, "RowDefault"]}, "RowDefault"], TraditionalForm], 
                    Format[#, TraditionalForm]& ], TraditionalForm]}, 
                    "RowDefault"], "\":\""}, "RowWithSeparators"], 
                  GrayLevel[0.5], StripOnInput -> False], {
                 LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                  0}, StripOnInput -> False]}, {
                TagBox[
                 GridBox[{{
                    StyleBox[
                    StyleBox[
                    
                    TemplateBox[{
                    "\"The general solution will be the sum of the \
complementary solution and particular solution.\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False], {
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}, StripOnInput -> False]}, {
                    TagBox[
                    TemplateBox[{
                    StyleBox[
                    "\"Find the complementary solution by solving \"", 
                    FontColor -> GrayLevel[0.5], StripOnInput -> False], 
                    TemplateBox[{
                    StyleBox[
                    InterpretationBox[
                    Cell[
                    BoxData[
                    FormBox[
                    TagBox[
                    RowBox[{
                    TagBox[
                    FractionBox[
                    RowBox[{
                    SuperscriptBox["\[DifferentialD]", "2"], 
                    RowBox[{"y", "(", "x", ")"}]}], 
                    RowBox[{"\[DifferentialD]", 
                    SuperscriptBox["x", "2"]}], MultilineFunction -> None], 
                    HoldForm], "+", 
                    TagBox[
                    FractionBox[
                    RowBox[{"\[DifferentialD]", 
                    RowBox[{"y", "(", "x", ")"}]}], 
                    RowBox[{"\[DifferentialD]", "x"}], MultilineFunction -> 
                    None], HoldForm]}], HoldForm], TraditionalForm]]], 
                    ExpressionCell[
                    
                    CalculateScan`StepByStepMath`StepByStepDSolve`Private`\
MyPlus[
                    
                    CalculateScan`StepByStepMath`\
StepByStepMathCommonFunctions`mathWrapper[
                    Dt[
                    $CellContext`y[$CellContext`x], {$CellContext`x, 2}]], 
                    
                    CalculateScan`StepByStepMath`\
StepByStepMathCommonFunctions`mathWrapper[
                    Dt[
                    $CellContext`y[$CellContext`x], $CellContext`x]]]]], 
                    FontColor -> GrayLevel[0], StripOnInput -> False], 
                    StyleBox[
                    InterpretationBox[
                    Cell[
                    BoxData[
                    FormBox["\" \[LongEqual] \"", TraditionalForm]]], 
                    ExpressionCell[" \[LongEqual] "]], FontColor -> 
                    GrayLevel[0], StripOnInput -> False], 
                    StyleBox[
                    InterpretationBox[
                    Cell[
                    BoxData[
                    FormBox["0", TraditionalForm]]], 
                    ExpressionCell[0]], FontColor -> GrayLevel[0], 
                    StripOnInput -> False]}, "RowDefault"], 
                    StyleBox[
                    "\":\"", FontColor -> GrayLevel[0.5], StripOnInput -> 
                    False]}, "RowDefault"], HoldForm]}}, 
                  GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                  AllowScriptLevelChange -> False, DefaultBaseStyle -> 
                  "Column", 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                 "Column"]}, {
                TagBox[
                 GridBox[{{
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    StyleBox[
                    
                    TemplateBox[{
                    "\"Assume a solution will be proportional to \"", 
                    TemplateBox[{
                    StyleBox[
                    InterpretationBox[
                    Cell[
                    BoxData[
                    FormBox[
                    SuperscriptBox["\[ExponentialE]", 
                    RowBox[{"\[Lambda]", " ", "x"}]], TraditionalForm]]], 
                    ExpressionCell[
                    E^($CellContext`x $CellContext`\[Lambda])]], FontColor -> 
                    GrayLevel[0], StripOnInput -> False]}, "RowDefault"], 
                    "\" for some constant \"", 
                    TemplateBox[{
                    StyleBox[
                    InterpretationBox[
                    Cell[
                    BoxData[
                    FormBox["\[Lambda]", TraditionalForm]]], 
                    ExpressionCell[$CellContext`\[Lambda]]], FontColor -> 
                    GrayLevel[0], StripOnInput -> False]}, "RowDefault"], 
                    "\".\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False], {
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}, StripOnInput -> False]}, {
                    StyleBox[
                    StyleBox[
                    TemplateBox[{"\"Substitute \"", 
                    TemplateBox[{
                    StyleBox[
                    InterpretationBox[
                    Cell[
                    BoxData[
                    FormBox[
                    RowBox[{"y", "(", "x", ")"}], TraditionalForm]]], 
                    ExpressionCell[
                    $CellContext`y[$CellContext`x]]], FontColor -> 
                    GrayLevel[0], StripOnInput -> False], 
                    StyleBox[
                    InterpretationBox[
                    Cell[
                    BoxData[
                    FormBox["\" \[LongEqual] \"", TraditionalForm]]], 
                    ExpressionCell[" \[LongEqual] "]], FontColor -> 
                    GrayLevel[0], StripOnInput -> False], 
                    StyleBox[
                    InterpretationBox[
                    Cell[
                    BoxData[
                    FormBox[
                    SuperscriptBox["\[ExponentialE]", 
                    RowBox[{"\[Lambda]", " ", "x"}]], TraditionalForm]]], 
                    ExpressionCell[
                    E^($CellContext`x $CellContext`\[Lambda])]], FontColor -> 
                    GrayLevel[0], StripOnInput -> False]}, "RowDefault"], 
                    "\" into the differential equation:\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False], {
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{0.5}}}], 
                    "Column"]}, {
                    TagBox[
                    TemplateBox[{
                    TagBox[
                    RowBox[{
                    TagBox[
                    RowBox[{
                    FractionBox[
                    RowBox[{
                    SuperscriptBox["\[DifferentialD]", "2"], "\"\""}], 
                    RowBox[{"\[DifferentialD]", 
                    SuperscriptBox["x", "2"]}], MultilineFunction -> None], 
                    "\[InvisibleApplication]", 
                    RowBox[{"(", 
                    SuperscriptBox["\[ExponentialE]", 
                    RowBox[{"\[Lambda]", " ", "x"}]], ")"}]}], HoldForm], "+", 
                    TagBox[
                    RowBox[{
                    FractionBox[
                    RowBox[{"\[DifferentialD]", "\"\""}], 
                    RowBox[{"\[DifferentialD]", "x"}], MultilineFunction -> 
                    None], "\[InvisibleApplication]", 
                    RowBox[{"(", 
                    SuperscriptBox["\[ExponentialE]", 
                    RowBox[{"\[Lambda]", " ", "x"}]], ")"}]}], HoldForm]}], 
                    HoldForm], "\" \[LongEqual] \"", "0"}, "RowDefault"], 
                    HoldForm]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                  AllowScriptLevelChange -> False, DefaultBaseStyle -> 
                  "Column", 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                 "Column"]}, {
                TagBox[
                 GridBox[{{
                    StyleBox[
                    StyleBox[
                    TemplateBox[{"\"Substitute \"", 
                    TemplateBox[{
                    StyleBox[
                    InterpretationBox[
                    Cell[
                    BoxData[
                    FormBox[
                    TagBox[
                    RowBox[{
                    FractionBox[
                    RowBox[{
                    SuperscriptBox["\[DifferentialD]", "2"], "\"\""}], 
                    RowBox[{"\[DifferentialD]", 
                    SuperscriptBox["x", "2"]}], MultilineFunction -> None], 
                    "\[InvisibleApplication]", 
                    RowBox[{"(", 
                    SuperscriptBox["\[ExponentialE]", 
                    RowBox[{"\[Lambda]", " ", "x"}]], ")"}]}], HoldForm], 
                    TraditionalForm]]], 
                    ExpressionCell[
                    
                    CalculateScan`StepByStepMath`\
StepByStepMathCommonFunctions`mathWrapper[
                    Dt["", {$CellContext`x, 2}][
                    E^($CellContext`\[Lambda] $CellContext`x)]]]], FontColor -> 
                    GrayLevel[0], StripOnInput -> False], 
                    StyleBox[
                    InterpretationBox[
                    Cell[
                    BoxData[
                    FormBox["\" \[LongEqual] \"", TraditionalForm]]], 
                    ExpressionCell[" \[LongEqual] "]], FontColor -> 
                    GrayLevel[0], StripOnInput -> False], 
                    StyleBox[
                    InterpretationBox[
                    Cell[
                    BoxData[
                    FormBox[
                    RowBox[{
                    SuperscriptBox["\[Lambda]", "2"], " ", 
                    SuperscriptBox["\[ExponentialE]", 
                    RowBox[{"\[Lambda]", " ", "x"}]]}], TraditionalForm]]], 
                    ExpressionCell[
                    E^($CellContext`x $CellContext`\[Lambda]) $CellContext`\
\[Lambda]^2]], FontColor -> GrayLevel[0], StripOnInput -> False], 
                    StyleBox[
                    InterpretationBox[
                    Cell[
                    BoxData[
                    FormBox[
                    StyleBox[
                    "\" and \"", FontColor -> GrayLevel[0.5], StripOnInput -> 
                    False], TraditionalForm]]], 
                    ExpressionCell[
                    Style[" and ", FontColor -> GrayLevel[0.5]]]], FontColor -> 
                    GrayLevel[0], StripOnInput -> False], 
                    StyleBox[
                    InterpretationBox[
                    Cell[
                    BoxData[
                    FormBox[
                    TagBox[
                    RowBox[{
                    FractionBox[
                    RowBox[{"\[DifferentialD]", "\"\""}], 
                    RowBox[{"\[DifferentialD]", "x"}], MultilineFunction -> 
                    None], "\[InvisibleApplication]", 
                    RowBox[{"(", 
                    SuperscriptBox["\[ExponentialE]", 
                    RowBox[{"\[Lambda]", " ", "x"}]], ")"}]}], HoldForm], 
                    TraditionalForm]]], 
                    ExpressionCell[
                    
                    CalculateScan`StepByStepMath`\
StepByStepMathCommonFunctions`mathWrapper[
                    Dt["", $CellContext`x][
                    E^($CellContext`\[Lambda] $CellContext`x)]]]], FontColor -> 
                    GrayLevel[0], StripOnInput -> False], 
                    StyleBox[
                    InterpretationBox[
                    Cell[
                    BoxData[
                    FormBox["\" \[LongEqual] \"", TraditionalForm]]], 
                    ExpressionCell[" \[LongEqual] "]], FontColor -> 
                    GrayLevel[0], StripOnInput -> False], 
                    StyleBox[
                    InterpretationBox[
                    Cell[
                    BoxData[
                    FormBox[
                    RowBox[{"\[Lambda]", " ", 
                    SuperscriptBox["\[ExponentialE]", 
                    RowBox[{"\[Lambda]", " ", "x"}]]}], TraditionalForm]]], 
                    ExpressionCell[
                    E^($CellContext`x $CellContext`\[Lambda]) $CellContext`\
\[Lambda]]], FontColor -> GrayLevel[0], StripOnInput -> False]}, 
                    "RowDefault"], "\":\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False], {
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}, StripOnInput -> False]}, {
                    TagBox[
                    TemplateBox[{
                    TagBox[
                    RowBox[{
                    RowBox[{
                    SuperscriptBox["\[Lambda]", "2"], " ", 
                    SuperscriptBox["\[ExponentialE]", 
                    RowBox[{"\[Lambda]", " ", "x"}]]}], "+", 
                    RowBox[{"\[Lambda]", " ", 
                    SuperscriptBox["\[ExponentialE]", 
                    RowBox[{"\[Lambda]", " ", "x"}]]}]}], HoldForm], 
                    "\" \[LongEqual] \"", "0"}, "RowDefault"], HoldForm]}}, 
                  GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                  AllowScriptLevelChange -> False, DefaultBaseStyle -> 
                  "Column", 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                 "Column"]}, {
                TagBox[
                 GridBox[{{
                    StyleBox[
                    StyleBox[
                    TemplateBox[{"\"Factor out \"", 
                    TemplateBox[{
                    StyleBox[
                    InterpretationBox[
                    Cell[
                    BoxData[
                    FormBox[
                    SuperscriptBox["\[ExponentialE]", 
                    RowBox[{"\[Lambda]", " ", "x"}]], TraditionalForm]]], 
                    ExpressionCell[
                    E^($CellContext`x $CellContext`\[Lambda])]], FontColor -> 
                    GrayLevel[0], StripOnInput -> False]}, "RowDefault"], 
                    "\":\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False], {
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}, StripOnInput -> False]}, {
                    TagBox[
                    TemplateBox[{
                    RowBox[{
                    RowBox[{"(", 
                    TagBox[
                    RowBox[{
                    SuperscriptBox["\[Lambda]", "2"], "+", "\[Lambda]"}], 
                    HoldForm], ")"}], " ", 
                    SuperscriptBox["\[ExponentialE]", 
                    RowBox[{"\[Lambda]", " ", "x"}]]}], "\" \[LongEqual] \"", 
                    "0"}, "RowDefault"], HoldForm]}}, 
                  GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                  AllowScriptLevelChange -> False, DefaultBaseStyle -> 
                  "Column", 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                 "Column"]}, {
                TagBox[
                 GridBox[{{
                    StyleBox[
                    StyleBox[
                    TemplateBox[{
                    TemplateBox[{
                    TemplateBox[{"\"Since \"", 
                    TemplateBox[{
                    StyleBox[
                    InterpretationBox[
                    Cell[
                    BoxData[
                    FormBox[
                    RowBox[{
                    SuperscriptBox["\[ExponentialE]", 
                    RowBox[{"\[Lambda]", " ", "x"}]], "\[NotEqual]", "0"}], 
                    TraditionalForm]]], 
                    ExpressionCell[
                    E^($CellContext`x $CellContext`\[Lambda]) != 0]], 
                    FontColor -> GrayLevel[0], StripOnInput -> False]}, 
                    "RowDefault"], "\" for any finite \"", 
                    TemplateBox[{
                    StyleBox[
                    InterpretationBox[
                    Cell[
                    BoxData[
                    FormBox["\[Lambda]", TraditionalForm]]], 
                    ExpressionCell[$CellContext`\[Lambda]]], FontColor -> 
                    GrayLevel[0], StripOnInput -> False]}, "RowDefault"]}, 
                    "RowDefault"]}, "RowDefault"], 
                    "\", the zeros must come from the polynomial:\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False], {
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}, StripOnInput -> False]}, {
                    TagBox[
                    TemplateBox[{
                    TagBox[
                    RowBox[{
                    SuperscriptBox["\[Lambda]", "2"], "+", "\[Lambda]"}], 
                    HoldForm], "\" \[LongEqual] \"", "0"}, "RowDefault"], 
                    HoldForm]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                  AllowScriptLevelChange -> False, DefaultBaseStyle -> 
                  "Column", 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                 "Column"]}, {
                TagBox[
                 GridBox[{{
                    StyleBox[
                    StyleBox[
                    TemplateBox[{"\"Factor:\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False], {
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}, StripOnInput -> False]}, {
                    TagBox[
                    TemplateBox[{
                    RowBox[{
                    RowBox[{"\[Lambda]", " ", 
                    RowBox[{"(", 
                    TagBox[
                    RowBox[{"\[Lambda]", "+", "1"}], HoldForm], ")"}]}], 
                    "\[LongEqual]", "0"}]}, "RowDefault"], HoldForm]}}, 
                  GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                  AllowScriptLevelChange -> False, DefaultBaseStyle -> 
                  "Column", 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                 "Column"]}, {
                TagBox[
                 GridBox[{{
                    StyleBox[
                    StyleBox[
                    TemplateBox[{"\"Solve for \"", 
                    TemplateBox[{
                    StyleBox[
                    InterpretationBox[
                    Cell[
                    BoxData[
                    FormBox["\[Lambda]", TraditionalForm]]], 
                    ExpressionCell[$CellContext`\[Lambda]]], FontColor -> 
                    GrayLevel[0], StripOnInput -> False]}, "RowDefault"], 
                    "\":\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False], {
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}, StripOnInput -> False]}, {
                    TagBox[
                    TemplateBox[{
                    RowBox[{"\[Lambda]", "\[LongEqual]", 
                    RowBox[{"-", "1"}]}], 
                    StyleBox[
                    "\" or \"", FontColor -> GrayLevel[0.5], StripOnInput -> 
                    False], 
                    RowBox[{"\[Lambda]", "\[LongEqual]", "0"}]}, 
                    "RowDefault"], HoldForm]}}, 
                  GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                  AllowScriptLevelChange -> False, DefaultBaseStyle -> 
                  "Column", 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                 "Column"]}, {
                TagBox[
                 GridBox[{{
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    StyleBox[
                    TemplateBox[{"\"The root \"", 
                    TemplateBox[{
                    StyleBox[
                    InterpretationBox[
                    Cell[
                    BoxData[
                    FormBox["\[Lambda]", TraditionalForm]]], 
                    ExpressionCell[$CellContext`\[Lambda]]], FontColor -> 
                    GrayLevel[0], StripOnInput -> False], 
                    StyleBox[
                    InterpretationBox[
                    Cell[
                    BoxData[
                    FormBox["\" \[LongEqual] \"", TraditionalForm]]], 
                    ExpressionCell[" \[LongEqual] "]], FontColor -> 
                    GrayLevel[0], StripOnInput -> False], 
                    StyleBox[
                    InterpretationBox[
                    Cell[
                    BoxData[
                    FormBox[
                    RowBox[{"-", "1"}], TraditionalForm]]], 
                    ExpressionCell[-1]], FontColor -> GrayLevel[0], 
                    StripOnInput -> False]}, "RowDefault"], "\" gives \"", 
                    TemplateBox[{
                    StyleBox[
                    InterpretationBox[
                    Cell[
                    BoxData[
                    FormBox[
                    RowBox[{
                    SubscriptBox["y", "1"], "(", "x", ")"}], 
                    TraditionalForm]]], 
                    ExpressionCell[
                    Subscript[$CellContext`y, 1][$CellContext`x]]], FontColor -> 
                    GrayLevel[0], StripOnInput -> False], 
                    StyleBox[
                    InterpretationBox[
                    Cell[
                    BoxData[
                    FormBox["\" \[LongEqual] \"", TraditionalForm]]], 
                    ExpressionCell[" \[LongEqual] "]], FontColor -> 
                    GrayLevel[0], StripOnInput -> False], 
                    StyleBox[
                    InterpretationBox[
                    Cell[
                    BoxData[
                    FormBox[
                    RowBox[{
                    SubscriptBox["c", "1"], " ", 
                    SuperscriptBox["\[ExponentialE]", 
                    RowBox[{"-", "x"}]]}], TraditionalForm]]], 
                    ExpressionCell[
                    E^(-$CellContext`x) Subscript[$CellContext`c, 1]]], 
                    FontColor -> GrayLevel[0], StripOnInput -> False]}, 
                    "RowDefault"], "\" as a solution, where \"", 
                    TemplateBox[{
                    StyleBox[
                    InterpretationBox[
                    Cell[
                    BoxData[
                    FormBox[
                    SubscriptBox["c", "1"], TraditionalForm]]], 
                    ExpressionCell[
                    Subscript[$CellContext`c, 1]]], FontColor -> GrayLevel[0],
                     StripOnInput -> False]}, "RowDefault"], 
                    "\" is an arbitrary constant.\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False], {
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}, StripOnInput -> False]}, {
                    StyleBox[
                    StyleBox[
                    TemplateBox[{"\"The root \"", 
                    TemplateBox[{
                    StyleBox[
                    InterpretationBox[
                    Cell[
                    BoxData[
                    FormBox["\[Lambda]", TraditionalForm]]], 
                    ExpressionCell[$CellContext`\[Lambda]]], FontColor -> 
                    GrayLevel[0], StripOnInput -> False], 
                    StyleBox[
                    InterpretationBox[
                    Cell[
                    BoxData[
                    FormBox["\" \[LongEqual] \"", TraditionalForm]]], 
                    ExpressionCell[" \[LongEqual] "]], FontColor -> 
                    GrayLevel[0], StripOnInput -> False], 
                    StyleBox[
                    InterpretationBox[
                    Cell[
                    BoxData[
                    FormBox["0", TraditionalForm]]], 
                    ExpressionCell[0]], FontColor -> GrayLevel[0], 
                    StripOnInput -> False]}, "RowDefault"], "\" gives \"", 
                    TemplateBox[{
                    StyleBox[
                    InterpretationBox[
                    Cell[
                    BoxData[
                    FormBox[
                    RowBox[{
                    SubscriptBox["y", "2"], "(", "x", ")"}], 
                    TraditionalForm]]], 
                    ExpressionCell[
                    Subscript[$CellContext`y, 2][$CellContext`x]]], FontColor -> 
                    GrayLevel[0], StripOnInput -> False], 
                    StyleBox[
                    InterpretationBox[
                    Cell[
                    BoxData[
                    FormBox["\" \[LongEqual] \"", TraditionalForm]]], 
                    ExpressionCell[" \[LongEqual] "]], FontColor -> 
                    GrayLevel[0], StripOnInput -> False], 
                    StyleBox[
                    InterpretationBox[
                    Cell[
                    BoxData[
                    FormBox[
                    SubscriptBox["c", "2"], TraditionalForm]]], 
                    ExpressionCell[
                    Subscript[$CellContext`c, 2]]], FontColor -> GrayLevel[0],
                     StripOnInput -> False]}, "RowDefault"], 
                    "\" as a solution, where \"", 
                    TemplateBox[{
                    StyleBox[
                    InterpretationBox[
                    Cell[
                    BoxData[
                    FormBox[
                    SubscriptBox["c", "2"], TraditionalForm]]], 
                    ExpressionCell[
                    Subscript[$CellContext`c, 2]]], FontColor -> GrayLevel[0],
                     StripOnInput -> False]}, "RowDefault"], 
                    "\" is an arbitrary constant.\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False], {
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}, StripOnInput -> False]}, {
                    StyleBox[
                    StyleBox[
                    
                    TemplateBox[{
                    "\"The general solution is the sum of the above \
solutions:\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False], {
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{0.5}}}], 
                    "Column"]}, {
                    TagBox[
                    TemplateBox[{
                    RowBox[{"y", "(", "x", ")"}], "\" \[LongEqual] \"", 
                    TagBox[
                    RowBox[{
                    RowBox[{
                    SubscriptBox["y", "1"], "(", "x", ")"}], "+", 
                    RowBox[{
                    SubscriptBox["y", "2"], "(", "x", ")"}]}], HoldForm], 
                    "\" \[LongEqual] \"", 
                    TagBox[
                    RowBox[{
                    RowBox[{
                    SubscriptBox["c", "1"], " ", 
                    SuperscriptBox["\[ExponentialE]", 
                    RowBox[{"-", "x"}]]}], "+", 
                    SubscriptBox["c", "2"]}], HoldForm]}, "RowDefault"], 
                    HoldForm]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                  AllowScriptLevelChange -> False, DefaultBaseStyle -> 
                  "Column", 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                 "Column"]}, {
                TagBox[
                 GridBox[{{
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    StyleBox[
                    TemplateBox[{"\"Determine the particular solution to \"", 
                    TemplateBox[{
                    StyleBox[
                    InterpretationBox[
                    Cell[
                    BoxData[
                    FormBox[
                    RowBox[{
                    TagBox[
                    RowBox[{
                    TagBox[
                    FractionBox[
                    RowBox[{
                    SuperscriptBox["\[DifferentialD]", "2"], 
                    RowBox[{"y", "(", "x", ")"}]}], 
                    RowBox[{"\[DifferentialD]", 
                    SuperscriptBox["x", "2"]}], MultilineFunction -> None], 
                    HoldForm], "+", 
                    TagBox[
                    FractionBox[
                    RowBox[{"\[DifferentialD]", 
                    RowBox[{"y", "(", "x", ")"}]}], 
                    RowBox[{"\[DifferentialD]", "x"}], MultilineFunction -> 
                    None], HoldForm]}], HoldForm], "\[LongEqual]", 
                    FractionBox["1", "4"]}], TraditionalForm]]], 
                    ExpressionCell[
                    CalculateScan`StepByStepMath`StepByStepDSolve`Private`\
MyPlus[
                    
                    CalculateScan`StepByStepMath`\
StepByStepMathCommonFunctions`mathWrapper[
                    Dt[
                    $CellContext`y[$CellContext`x], {$CellContext`x, 2}]], 
                    
                    CalculateScan`StepByStepMath`\
StepByStepMathCommonFunctions`mathWrapper[
                    Dt[
                    $CellContext`y[$CellContext`x], $CellContext`x]]] == 
                    Rational[1, 4]]], FontColor -> GrayLevel[0], StripOnInput -> 
                    False]}, "RowDefault"], 
                    "\" by the method of undetermined coefficients:\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False], {
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}, StripOnInput -> False]}, {
                    StyleBox[
                    StyleBox[
                    TemplateBox[{"\"The particular solution to \"", 
                    TemplateBox[{
                    StyleBox[
                    InterpretationBox[
                    Cell[
                    BoxData[
                    FormBox[
                    TagBox[
                    RowBox[{
                    TagBox[
                    FractionBox[
                    RowBox[{
                    SuperscriptBox["\[DifferentialD]", "2"], 
                    RowBox[{"y", "(", "x", ")"}]}], 
                    RowBox[{"\[DifferentialD]", 
                    SuperscriptBox["x", "2"]}], MultilineFunction -> None], 
                    HoldForm], "+", 
                    TagBox[
                    FractionBox[
                    RowBox[{"\[DifferentialD]", 
                    RowBox[{"y", "(", "x", ")"}]}], 
                    RowBox[{"\[DifferentialD]", "x"}], MultilineFunction -> 
                    None], HoldForm]}], HoldForm], TraditionalForm]]], 
                    ExpressionCell[
                    
                    CalculateScan`StepByStepMath`StepByStepDSolve`Private`\
MyPlus[
                    
                    CalculateScan`StepByStepMath`\
StepByStepMathCommonFunctions`mathWrapper[
                    Dt[
                    $CellContext`y[$CellContext`x], {$CellContext`x, 2}]], 
                    
                    CalculateScan`StepByStepMath`\
StepByStepMathCommonFunctions`mathWrapper[
                    Dt[
                    $CellContext`y[$CellContext`x], $CellContext`x]]]]], 
                    FontColor -> GrayLevel[0], StripOnInput -> False], 
                    StyleBox[
                    InterpretationBox[
                    Cell[
                    BoxData[
                    FormBox["\" \[LongEqual] \"", TraditionalForm]]], 
                    ExpressionCell[" \[LongEqual] "]], FontColor -> 
                    GrayLevel[0], StripOnInput -> False], 
                    StyleBox[
                    InterpretationBox[
                    Cell[
                    BoxData[
                    FormBox[
                    FractionBox["1", "4"], TraditionalForm]]], 
                    ExpressionCell[
                    Rational[1, 4]]], FontColor -> GrayLevel[0], StripOnInput -> 
                    False]}, "RowDefault"], "\" is of the form:\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False], {
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{0.5}}}], 
                    "Column"]}, {
                    TagBox[
                    TemplateBox[{
                    RowBox[{
                    RowBox[{
                    SubscriptBox["y", "p"], "(", "x", ")"}], "\[LongEqual]", 
                    TagBox[
                    RowBox[{
                    SubscriptBox[
                    StyleBox["a", Italic, StripOnInput -> False], "1"], " ", 
                    "x"}], HoldForm]}], 
                    StyleBox[
                    "\", where \"", FontColor -> GrayLevel[0.5], StripOnInput -> 
                    False], 
                    SubscriptBox["a", "1"], 
                    StyleBox[
                    "\" was multiplied by \"", FontColor -> GrayLevel[0.5], 
                    StripOnInput -> False], "x", 
                    StyleBox[
                    "\" to account for \"", FontColor -> GrayLevel[0.5], 
                    StripOnInput -> False], 
                    TemplateBox[{"1"}, "RowDefault"], 
                    StyleBox[
                    "\" in the complementary solution.\"", FontColor -> 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    HoldForm]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                  AllowScriptLevelChange -> False, DefaultBaseStyle -> 
                  "Column", 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                 "Column"]}, {
                TagBox[
                 GridBox[{{
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    StyleBox[
                    TemplateBox[{"\"Solve for the unknown constant \"", 
                    TemplateBox[{
                    StyleBox[
                    InterpretationBox[
                    Cell[
                    BoxData[
                    FormBox[
                    SubscriptBox["a", "1"], TraditionalForm]]], 
                    ExpressionCell[
                    Subscript[$CellContext`a, 1]]], FontColor -> GrayLevel[0],
                     StripOnInput -> False]}, "RowDefault"], "\":\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False], {
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}, StripOnInput -> False]}, {
                    StyleBox[
                    StyleBox[
                    TemplateBox[{"\"Compute \"", 
                    TemplateBox[{
                    StyleBox[
                    InterpretationBox[
                    Cell[
                    BoxData[
                    FormBox[
                    TagBox[
                    FractionBox[
                    RowBox[{"\[DifferentialD]", 
                    RowBox[{
                    SubscriptBox["y", "p"], "(", "x", ")"}]}], 
                    RowBox[{"\[DifferentialD]", "x"}], MultilineFunction -> 
                    None], HoldForm], TraditionalForm]]], 
                    ExpressionCell[
                    
                    CalculateScan`StepByStepMath`\
StepByStepMathCommonFunctions`mathWrapper[
                    Dt[
                    
                    Subscript[$CellContext`y, \
$CellContext`p][$CellContext`x], $CellContext`x]]]], FontColor -> 
                    GrayLevel[0], StripOnInput -> False]}, "RowDefault"], 
                    "\":\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False], {
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{0.5}}}], 
                    "Column"]}, {
                    TagBox[
                    TemplateBox[{
                    TagBox[
                    GridBox[{{
                    TemplateBox[{
                    TagBox[
                    FractionBox[
                    RowBox[{"\[DifferentialD]", 
                    RowBox[{
                    SubscriptBox["y", "p"], "(", "x", ")"}]}], 
                    RowBox[{"\[DifferentialD]", "x"}], MultilineFunction -> 
                    None], HoldForm], "\" \[LongEqual] \"", 
                    TagBox[
                    RowBox[{
                    FractionBox[
                    RowBox[{"\[DifferentialD]", "\"\""}], 
                    RowBox[{"\[DifferentialD]", "x"}], MultilineFunction -> 
                    None], "\[InvisibleApplication]", 
                    RowBox[{"(", 
                    RowBox[{
                    SubscriptBox["a", "1"], " ", "x"}], ")"}]}], HoldForm]}, 
                    "RowDefault"]}, {
                    TemplateBox[{"\"\"", "\" \[LongEqual] \"", 
                    SubscriptBox["a", "1"]}, "RowDefault"]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{" \[LongEqual] "}}, 
                    "Rows" -> {{" \[LongEqual] "}}}, AutoDelete -> False, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Grid"]}, "RowDefault"], HoldForm]}}, 
                  GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                  AllowScriptLevelChange -> False, DefaultBaseStyle -> 
                  "Column", 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                 "Column"]}, {
                TagBox[
                 GridBox[{{
                    StyleBox[
                    StyleBox[
                    TemplateBox[{"\"Compute \"", 
                    TemplateBox[{
                    StyleBox[
                    InterpretationBox[
                    Cell[
                    BoxData[
                    FormBox[
                    TagBox[
                    FractionBox[
                    RowBox[{
                    SuperscriptBox["\[DifferentialD]", "2"], 
                    RowBox[{
                    SubscriptBox["y", "p"], "(", "x", ")"}]}], 
                    RowBox[{"\[DifferentialD]", 
                    SuperscriptBox["x", "2"]}], MultilineFunction -> None], 
                    HoldForm], TraditionalForm]]], 
                    ExpressionCell[
                    
                    CalculateScan`StepByStepMath`\
StepByStepMathCommonFunctions`mathWrapper[
                    Dt[
                    
                    Subscript[$CellContext`y, \
$CellContext`p][$CellContext`x], {$CellContext`x, 2}]]]], FontColor -> 
                    GrayLevel[0], StripOnInput -> False]}, "RowDefault"], 
                    "\":\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False], {
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}, StripOnInput -> False]}, {
                    TagBox[
                    TemplateBox[{
                    TagBox[
                    GridBox[{{
                    TemplateBox[{
                    TagBox[
                    FractionBox[
                    RowBox[{
                    SuperscriptBox["\[DifferentialD]", "2"], 
                    RowBox[{
                    SubscriptBox["y", "p"], "(", "x", ")"}]}], 
                    RowBox[{"\[DifferentialD]", 
                    SuperscriptBox["x", "2"]}], MultilineFunction -> None], 
                    HoldForm], "\" \[LongEqual] \"", 
                    TagBox[
                    RowBox[{
                    FractionBox[
                    RowBox[{
                    SuperscriptBox["\[DifferentialD]", "2"], "\"\""}], 
                    RowBox[{"\[DifferentialD]", 
                    SuperscriptBox["x", "2"]}], MultilineFunction -> None], 
                    "\[InvisibleApplication]", 
                    RowBox[{"(", 
                    RowBox[{
                    SubscriptBox["a", "1"], " ", "x"}], ")"}]}], HoldForm]}, 
                    "RowDefault"]}, {
                    
                    TemplateBox[{"\"\"", "\" \[LongEqual] \"", "0"}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{" \[LongEqual] "}}, 
                    "Rows" -> {{" \[LongEqual] "}}}, AutoDelete -> False, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Grid"]}, "RowDefault"], HoldForm]}}, 
                  GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                  AllowScriptLevelChange -> False, DefaultBaseStyle -> 
                  "Column", 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                 "Column"]}, {
                TagBox[
                 GridBox[{{
                    StyleBox[
                    StyleBox[
                    TemplateBox[{"\"Substitute the particular solution \"", 
                    TemplateBox[{
                    StyleBox[
                    InterpretationBox[
                    Cell[
                    BoxData[
                    FormBox[
                    RowBox[{
                    SubscriptBox["y", "p"], "(", "x", ")"}], 
                    TraditionalForm]]], 
                    ExpressionCell[
                    
                    Subscript[$CellContext`y, \
$CellContext`p][$CellContext`x]]], FontColor -> GrayLevel[0], StripOnInput -> 
                    False]}, "RowDefault"], 
                    "\" into the differential equation:\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False], {
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}, StripOnInput -> False]}, {
                    TagBox[
                    GridBox[{{
                    TagBox[
                    TemplateBox[{
                    TagBox[
                    RowBox[{
                    TagBox[
                    FractionBox[
                    RowBox[{
                    SuperscriptBox["\[DifferentialD]", "2"], 
                    RowBox[{
                    SubscriptBox["y", "p"], "(", "x", ")"}]}], 
                    RowBox[{"\[DifferentialD]", 
                    SuperscriptBox["x", "2"]}], MultilineFunction -> None], 
                    HoldForm], "+", 
                    TagBox[
                    FractionBox[
                    RowBox[{"\[DifferentialD]", 
                    RowBox[{
                    SubscriptBox["y", "p"], "(", "x", ")"}]}], 
                    RowBox[{"\[DifferentialD]", "x"}], MultilineFunction -> 
                    None], HoldForm]}], HoldForm], "\" \[LongEqual] \"", 
                    TagBox[
                    FractionBox["1", "4"], HoldForm]}, "RowDefault"], 
                    HoldForm]}, {
                    TagBox[
                    TemplateBox[{
                    SubscriptBox["a", "1"], "\" \[LongEqual] \"", 
                    TagBox[
                    FractionBox["1", "4"], HoldForm]}, "RowDefault"], 
                    HoldForm]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{0.5}}}], 
                    "Column"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                  AllowScriptLevelChange -> False, DefaultBaseStyle -> 
                  "Column", 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                 "Column"]}, {
                TagBox[
                 GridBox[{{
                    StyleBox[
                    StyleBox[
                    TemplateBox[{"\"Substitute \"", 
                    TemplateBox[{
                    StyleBox[
                    InterpretationBox[
                    Cell[
                    BoxData[
                    FormBox[
                    SubscriptBox["a", "1"], TraditionalForm]]], 
                    ExpressionCell[
                    Subscript[$CellContext`a, 1]]], FontColor -> GrayLevel[0],
                     StripOnInput -> False]}, "RowDefault"], "\" into \"", 
                    TemplateBox[{
                    StyleBox[
                    InterpretationBox[
                    Cell[
                    BoxData[
                    FormBox[
                    RowBox[{
                    SubscriptBox["y", "p"], "(", "x", ")"}], 
                    TraditionalForm]]], 
                    ExpressionCell[
                    
                    Subscript[$CellContext`y, \
$CellContext`p][$CellContext`x]]], FontColor -> GrayLevel[0], StripOnInput -> 
                    False], 
                    StyleBox[
                    InterpretationBox[
                    Cell[
                    BoxData[
                    FormBox["\" \[LongEqual] \"", TraditionalForm]]], 
                    ExpressionCell[" \[LongEqual] "]], FontColor -> 
                    GrayLevel[0], StripOnInput -> False], 
                    StyleBox[
                    InterpretationBox[
                    Cell[
                    BoxData[
                    FormBox[
                    RowBox[{
                    SubscriptBox["a", "1"], " ", "x"}], TraditionalForm]]], 
                    
                    ExpressionCell[$CellContext`x 
                    Subscript[$CellContext`a, 1]]], FontColor -> GrayLevel[0],
                     StripOnInput -> False]}, "RowDefault"], "\":\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False], {
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}, StripOnInput -> False]}, {
                    TagBox[
                    TemplateBox[{
                    RowBox[{
                    SubscriptBox["y", "p"], "(", "x", ")"}], 
                    "\" \[LongEqual] \"", 
                    FractionBox["x", "4"]}, "RowDefault"], HoldForm]}}, 
                  GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                  AllowScriptLevelChange -> False, DefaultBaseStyle -> 
                  "Column", 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                 "Column"]}, {
                TagBox[
                 GridBox[{{
                    StyleBox[
                    StyleBox[
                    
                    TemplateBox[{"\"The general solution is:\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False], {
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}, StripOnInput -> False]}, {
                    FrameBox[
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    TemplateBox[{"\"Answer\"", "\":\""}, "RowDefault"], 
                    FontFamily -> "Helvetica", FontSize -> 12, StripOnInput -> 
                    False], "\[SpanFromLeft]"}, {"\"\"", 
                    TagBox[
                    TemplateBox[{
                    RowBox[{"y", "(", "x", ")"}], "\" \[LongEqual] \"", 
                    TagBox[
                    RowBox[{
                    RowBox[{
                    SubscriptBox["y", "\"c\""], "(", "x", ")"}], "+", 
                    RowBox[{
                    SubscriptBox["y", "p"], "(", "x", ")"}]}], HoldForm], 
                    "\" \[LongEqual] \"", 
                    TagBox[
                    RowBox[{
                    FractionBox["x", "4"], "+", 
                    RowBox[{
                    SubscriptBox["c", "1"], " ", 
                    SuperscriptBox["\[ExponentialE]", 
                    RowBox[{"-", "x"}]]}], "+", 
                    SubscriptBox["c", "2"]}], HoldForm]}, "RowDefault"], 
                    HoldForm]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Baseline}}}, 
                    AutoDelete -> False, 
                    GridBoxItemSize -> {"Columns" -> {2.5, Automatic}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {2, 0, 3}, "Rows" -> {1.5, 1, 2}}, 
                    AllowScriptLevelChange -> False], "Grid"], FrameStyle -> {
                    AbsoluteThickness[1], 
                    RGBColor[0.52, 0.76, 0.86]}, Background -> 
                    RGBColor[0.91, 0.98, 1], RoundingRadius -> 3, 
                    FrameMargins -> 12, StripOnInput -> False]}}, 
                  GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                  AllowScriptLevelChange -> False, DefaultBaseStyle -> 
                  "Column", 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                 "Column"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
              AllowScriptLevelChange -> False, DefaultBaseStyle -> "Column", 
              GridBoxDividers -> {
               "Columns" -> {{False}}, "Rows" -> {False, {True}, False}}, 
              GridBoxItemSize -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
              GridBoxSpacings -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{3}}}, FrameStyle -> 
              GrayLevel[0.7]], "Column"], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          CellSize -> {550, Automatic}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement["dataformats", {}, {"plaintext"}]}], 
     XMLElement["states", {"count" -> "2"}, {
       XMLElement[
       "statelist", {
        "count" -> "4", "value" -> "Solve with undetermined coefficients", 
         "delimiters" -> ""}, {
         XMLElement[
         "state", {
          "name" -> "Solve with undetermined coefficients", "input" -> 
           "DifferentialEquationSolution__Solve with undetermined \
coefficients"}, {}], 
         XMLElement[
         "state", {
          "name" -> "Use reduction of order", "input" -> 
           "DifferentialEquationSolution__Use reduction of order"}, {}], 
         XMLElement[
         "state", {
          "name" -> "Solve the ODE", "input" -> 
           "DifferentialEquationSolution__Solve the ODE"}, {}], 
         XMLElement[
         "state", {
          "name" -> "Solve as an autonomous equation", "input" -> 
           "DifferentialEquationSolution__Solve as an autonomous equation"}, \
{}]}], 
       XMLElement[
       "state", {
        "name" -> "Hide steps", "input" -> 
         "DifferentialEquationSolution__Hide steps"}, {}]}]}], 
   Typeset`pod6$$ = XMLElement[
   "pod", {"title" -> "Plots of sample individual solutions", "scanner" -> 
     "ODE", "id" -> "PlotsOfSampleIndividualSolutions", "position" -> "600", 
     "error" -> "false", "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["cell", {"compressed" -> True, "string" -> False}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             GridBox[{{
                TagBox[
                 GridBox[{{
                    GraphicsBox[{{{}, {}, 
                    TagBox[{
                    Directive[
                    Opacity[1.], 
                    RGBColor[0.24720000000000014`, 0.24, 0.6], 
                    AbsoluteThickness[1]], 
                    LineBox[CompressedData["
1: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
NNDjrh/VQpWFGkb1o2KoWX12qntSCx1rGJftmRRDr2U81vEuaaG1827mvEti
qH/rNYbrnNpoef/B+60s4qjHU9z6i6I2ejp8+7CvsDjarfajaOUqXneN/n5J
XxyFJbemTyrroOCDP7z8UsSRk73FjmUaILHtnQo/j0gg6+f1W8oidVFRjYhm
GesO5JMnf0Df4CC68FHcXf+FNHIQFi0zNzmIviRv7jVvl0Y8nu4+J6wOIuo3
9zsn3kmj4qauN3FOB1FjdP9i3Cf83r5sV7kDDqJcGSEa93dp5C67WzKPdhBt
7vI1zNtFQePdAbuj+A1Qda+4edQNCvLMKXhybMwABQp8fXvs5C60+5To+aTW
Q0jnlEdy0kFZtM9Qo0H1tila1eE7n8opj4Zz61LS75kixmdvhkz55ZGtfPsK
z2NT1OVmd4NNUB7NMDY5szaYItZ/epqviMujutfruB1nTVGoKotw4T55xHqE
alJuYobMzytU9Z+URzv8AploHOaIPrZuE+2lPHLLnS6y6DdHbRq5zRapCqhT
VlFl/KUlEvCnHBqPVkIals4GEW8skVQr1T7ilhIyrlDXpfRZolJ1BWtKihJK
Fbi9OXrKErXWxspG5ykhpgyLyFw+K6Sz0SQ5t0MJpXnGH7tgY4WCO2+evbBJ
GVlUy0PKtBV64axjlZKvjEKPjKcuq1gjK1m+ouUlFSS87Gw4h6yR6/foY3MM
qshFQYi6YmSNzsfBmRVuVbRZ2n5c0tkavR0LX5PcrooKl2Nb+W5Yo28fK/r4
zFRRS2PcK7Epa+Sc3DAolqeKZDbNT7bl26DABvU/bWf2oXfLPR42lTYol2lH
iE3gPsRaV/eO3mKDxIq5xumR+5Dr/dstZp9skH7l516zjH3oDNd8ecUGW9SY
dODfirf7UCmTkI5xkC2SmfC3NNZSQ3/a6Y2NMbbod5Jld+MhNfRoLaXO8K4t
+ir4652hrRrSZAqLDS+2RewzXzPCfdVQwHZ2j/IJWzR+/1xwOU0NmXSqZeev
2KJz33Oq8svV0MrG4X3FrFQkNWRlXNyihu5fbv5nRoKKmGTUh2Y+q6EtHZoc
UvJU1OlQsk2KroZ8Y3N5vXSo6Jmj+Hav32rIfvLDaqsxFXWYWPC94FFH1h29
k/L2VLTPwfaP/FZ19D9eQ+Ri
                    "]]}, 
                    Annotation[#, "Charting`Private`Tag$1473810#1"]& ]}}, {
                    GridLines -> Dynamic[
                    Map[{{#, 
                    GrayLevel[0.7]}}& , 
                    MousePosition[{"Graphics", Graphics}, None]]], 
                    Method -> {"GridLinesInFront" -> True}, Axes -> True, 
                    Ticks -> False, AxesStyle -> GrayLevel[0.5], AxesLabel -> 
                    None, Frame -> True, FrameTicks -> False, PlotLabel -> 
                    None, RotateLabel -> False, ImageSize -> {140, Automatic},
                     FrameLabel -> {
                    FormBox["x", TraditionalForm], 
                    FormBox["y", TraditionalForm], None, None}, 
                    DisplayFunction -> Identity, AspectRatio -> 
                    NCache[GoldenRatio^(-1), 0.6180339887498948], 
                    Axes -> {True, True}, AxesLabel -> {
                    FormBox["x", TraditionalForm], 
                    FormBox["y", TraditionalForm]}, AxesOrigin -> {0, 0}, 
                    AxesStyle -> Directive[
                    AbsoluteThickness[0.2]], BaseStyle -> Automatic, 
                    DisplayFunction :> Identity, 
                    FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
                    Directive[
                    AbsoluteThickness[0.2]], 
                    FrameTicks -> {{Automatic, Automatic}, {
                    Automatic, Automatic}}, GridLinesStyle -> Automatic, 
                    Method -> {"ScalingFunctions" -> None}, PlotLabel -> 
                    FormBox[
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"y", "(", "0", ")"}], "\[LongEqual]", "1"}], ",", 
                    RowBox[{
                    RowBox[{
                    SuperscriptBox[
                    "y", "\[Prime]", MultilineFunction -> None], "(", "0", 
                    ")"}], "\[LongEqual]", "0"}]}], "}"}], TraditionalForm], 
                    PlotRange -> {All, All}, PlotRangeClipping -> True, 
                    PlotRangePadding -> {{
                    Scaled[0.05], 
                    Scaled[0.05]}, {
                    Scaled[0.05], 
                    Scaled[0.05]}}, Ticks -> {Automatic, Automatic}}], 
                    "\" \"", 
                    GraphicsBox[{{{}, {}, 
                    TagBox[{
                    Directive[
                    Opacity[1.], 
                    RGBColor[0.24720000000000014`, 0.24, 0.6], 
                    AbsoluteThickness[1]], 
                    LineBox[CompressedData["
1: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
ZWYNgEXRGxXIr683ryourwHnK15bMsKpwHzqv0gPtnVwlbPS3jWCClq21Mjq
Sq6DyeGl60v3qeD+iQHNIw7rgOvNhYGex1RwIjqcuQo5j8P78jiy4lHvZo2L
66C77cG/RWQxK2VPDcd1wM1Wx8QTQwVj5w8LaVxaB29f2PHpIotmMDdquKwD
3xNW3CXIWS9L0nU818Fom8ihe7FovWMr1y7fXgcKnvQlKk9Qvwb9yuDOWgec
enPWwYlUkM9upP1hbB0sc6VrTT6lAsJiVvqx8XVQr+v6fQk79g9zM/KQtK4T
czoVlKZpDfVMrIOB2R0Rwsihc4p0q3/WAcXXr9IIeVWmtOTA7DpQdmKgK0G+
foBze/nKOjgVnvbl5jPUf7mBa22cG4Bj3/NU9gwqEGaVPnpZbgPIvdudx5eN
zt++revSHhuAmWCzwpRLBb//TI0cYt8E81fPh0qWUUHeIYkzX5AP9k547EMW
PxjXYsGxCZJMkuzVkbNJ+356cW6CZkWHI4bIay8NTxdyb4JSi+QZT+Tu5Pbv
UpRNUF70ZFctsu3MX8J2wU2w1ro8bldOBRlVmzcFZTdBimbmQNJbKtihxp3g
b7wJZPI9p5gqUL4eb/eMJm4C2aCTS6+qqGBAQlP5VhKKJy6MpxS5Ru6Tzpbk
TRA6OyBbiZx7pSRcM2UTuKiQrFuR+VIvuaelbYLu83rlC8jl/F9Xz2ZsgpfC
l4+Bair4UE342pW7CcKUtn2gIpv3/y6f/rgJhvKDNac+UUGYdz3j/d+b4GfZ
002xOioYbyIF1AjSQb43vZk2n6nAfy62ZMt2OkjKfTfthKzuxTRtj7yXvVX1
GrL3+bjrLEJ0sCrnv4Yg5A3enBJtYTp4eOFf3zNkg4Q+ic+idDC2I290GPlZ
d2lZuwQdfHEj1cHpCxVU3DxQv7yXDv6zsiC4NKHzm3XyxC0tOpg9ezD3ChXt
X5mMv78LHfS8o3Ln2DcquNbxvaMNed8HHzYDZMfWwf3SrnSwJ3fy9ilkxYtC
G23IR9ftAi8g3+WQ+CbtRgdbAx5dDkI+l7zg//06HVwWaResQM433/1b0QfF
46b4U7GNCmQNlIh0IXTw5za3CZF2dH6ZElM64+lgZNDziMkOKogrv7EvoZYO
+ti4DVv/QOd5pfTbGnInX5yMI/KrhZGbVnV0cIt6+1VX5BgWoaGd9XTwlE/S
kh/yt+/rzPkNdFBV1G49ATl4m9KTui90kFdMracN+Ut67OpqKx1s7qic1e6m
gq5E+1GfPjrYqxocL9NDBcMuj9M/L9HBH5v68r9/UgG/wqhvyx56OKNHl6Xc
j+bdgY9X1WXp4fXZQK5DyK4aplcykJd+CbppIu8qyfbzkaOHKr1xKkbI4vfF
V8Xk6eEa18syJ2Teqi2X3PfTw3D3PdFJyBdKeoVE1OjhLLR6TD9ABVN1t7nu
adNDC2a74XpkrT22d2ps6SHh/h8v/SEqEFL9dac6gR7uDwqSlhulAjeH3Cyl
RHoYz15fsh9Zcsv25izkjh8GUBX5b2eX4r0ketjGu/OkFnK8worTqRR66B7K
cdUCudE3+/rYU3rISQkOu41ssyeGkz8HxbNzbVcvMrn7b0hkKT2keIPViN9U
MFStaTXWRg+n4+ytfoxRQdGE/aRVOz0M4XUN7EOWvZkd1IG8/U12+hByC8uj
xuoOejixkTswhey6TbA+pZMexnFvM2ccp4L/bg/cMOuhhw+I7KJ7kGvHCmq/
DNLDLo5JQT/kDA+G/e2z9PCb1MF/2ydQP1eFa50mM8Ca9y2mJyfRfA9eCW5F
vlMow3MGeWSWr0mfwgCdEnO/WiJv2Frc1OJhgGel5HUdkI3VhAwVtjBAccnd
8j7Ijyaf1BIFGGDLPZWOFGSrI3bMraIMkGvn29AxZOhTxuAuzwBFo+Njb/6h
gpM+ShzyRgzwT96ESMIUFRS0yVnEP2SAw3qSjgXTqB7ZqoxboxngZJj9zhJk
pwufSqKR98wt9b1BThs+p3LvEQNkzBY+VYlcbvHhpX8MAzz3n40KFXn9n5yN
YzwDHGoo7J5EbvxmvQSfMsDTy1nPJGfQ/BhMEiIWMMBQ89eHEpFV6hRVxVoY
YJcUwdl3lgq2HrlYk468W3u88xZylEfO2Z2tDLC4ZNexIGTZQptMyW8M0ILh
g/Ad5POHq4rl2hnggUy7+lhkAUG914e7GCC5VX29AFmDXGjq0M8A1x/9mhhF
3vfUQaNthgE+iv6v13gOvb+oyUt7eBjh5Ihas/A8FYzWlhYWIR9QKpsWQ3ac
vumlxssI20syKRLYv7nFdLYwwo2IL6YyyA7dV+bt+ND90vtaVZD/DGokJwsy
wlTSj3wj5FVLCTqBnYzwJOfVlUDkocbvJvJKjPCm19/CAWSD1u+eg6cZ4beu
b/LJ/6hgmxGh0SWVEVrZnzdeWqCCh1oWXXRpjFDJ79PQCnLy8fz5aOQ3H995
rSNfDQ0wLH3KCCUeOiYxLFKBnl13DN1/6Hre8C8u5AifBoeYbEb48/AOMzFk
/1C2nfUFjPCqqcCYLvLBh7+sTT4xwh3an27FIwvJWcStjTHC7vIr8/uWqKBt
Zl/P43FG2Np59qgi8lX+H7KyE4yw+Ud7jDLycZb0xXOTjPDMoJuSOvLBd4ck
KqcYIcHVyVULmaRDGr89xwhL7a2pZsgBapESwuuMMGp+9pgvcthvrcrrJCb4
quXGWBVykoW4R4UKE1w40dNzfBmdJ45/ZucOMMED8sl/9ZFzZ12PrSHHbx+i
N0I2d7c3UFNjguaVrBKmyGcTAxhKDzLBe5If7S2RdzszrhdqMMHzssMtl5Ef
Db3QLjnOBInuR8/dR/6QvePJoBUT/Jn42qEJeT70rsV4OLrOy9ahvYL670Ks
0NufTLDe0M1QchXtbzmznH0vE7RKHR+XQmZPd9En9jFBVu6VUGnkTS6lMrtf
TJDhS0+5LDLXt89a3INM8I/lexFF5BnlXlm730xQf69JB0SulY0+tW2OCaY8
fb1ijrz7lP7l12zMMIv/nvZdZP65WpMcRWa4lLXtwBiy563XomeVmKEDu3r6
OHLEtewNLmVmeGh1iXMSWehQ0vhVFWbYMmfUO4XcwkUXrKrGDNXORNyaRy71
Ti1tAszQrIYudxNZLyoCMBxnhtdM97dsWaMCevauo0k2zPCi8CkNDeT8y2dE
nkQyw1u+1amPkG9oGiuZRDFDp5GGnsfIT7xcLLkeMkMrLV+BWGRlD5HegGhm
ePrvwMMnyH76KXmXYpjhj4XBW8nIf5Qk7mskMkP18ny9LGS1L8Kaa5nM8GvC
98Jy5J2e3uKZFczww1Rm2S9kf+MHjF+nmOGMQaeD1Dp6PxnbLUf/ZYYZXvo3
diPfrE2gN5tmhqFRfvelkbn91XV7ZtDzeXmL9iA7gPslY/OoXj5HVuWR33m9
Y2JbZYb3nNcCVJHFH5ZFmrCywDqnDCc95OfPtf+IiLLA9zZTrs7Ilj8u3Ekz
YYFl/a8NcpCtL39jvnKSBTZ/CDr4HPnCPoZYVVMWaJO0XfoF8n7qi5nWUyzw
sfxHplfIYx3+sSzmLPBjxGZpPrLXev4TNysWyP6LzP8GWfB9yCOzyyxQTySz
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
                    "]]}, 
                    Annotation[#, "Charting`Private`Tag$1473832#1"]& ]}}, {
                    GridLines -> Dynamic[
                    Map[{{#, 
                    GrayLevel[0.7]}}& , 
                    MousePosition[{"Graphics", Graphics}, None]]], 
                    Method -> {"GridLinesInFront" -> True}, Axes -> True, 
                    Ticks -> False, AxesStyle -> GrayLevel[0.5], AxesLabel -> 
                    None, Frame -> True, FrameTicks -> False, PlotLabel -> 
                    None, RotateLabel -> False, ImageSize -> {140, Automatic},
                     FrameLabel -> {
                    FormBox["y", TraditionalForm], 
                    FormBox[
                    SuperscriptBox[
                    "y", "\[Prime]", MultilineFunction -> None], 
                    TraditionalForm], None, None}, DisplayFunction -> 
                    Identity, AspectRatio -> 
                    NCache[GoldenRatio^(-1), 0.6180339887498948], 
                    Axes -> {True, True}, AxesLabel -> {
                    FormBox["y", TraditionalForm], 
                    FormBox[
                    SuperscriptBox[
                    "y", "\[Prime]", MultilineFunction -> None], 
                    TraditionalForm]}, AxesOrigin -> {0, 0}, AxesStyle -> 
                    Directive[
                    AbsoluteThickness[0.2]], BaseStyle -> Automatic, 
                    DisplayFunction :> Identity, 
                    FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
                    Directive[
                    AbsoluteThickness[0.2]], 
                    FrameTicks -> {{Automatic, Automatic}, {
                    Automatic, Automatic}}, GridLinesStyle -> Automatic, 
                    Method -> {"ScalingFunctions" -> None}, PlotLabel -> 
                    FormBox[
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"y", "(", "0", ")"}], "\[LongEqual]", "1"}], ",", 
                    RowBox[{
                    RowBox[{
                    SuperscriptBox[
                    "y", "\[Prime]", MultilineFunction -> None], "(", "0", 
                    ")"}], "\[LongEqual]", "0"}]}], "}"}], TraditionalForm], 
                    PlotRange -> {All, All}, PlotRangeClipping -> True, 
                    PlotRangePadding -> {{
                    Scaled[0.05], 
                    Scaled[0.05]}, {
                    Scaled[0.05], 
                    Scaled[0.05]}}, Ticks -> {Automatic, Automatic}}], 
                    "\" \"", 
                    StyleBox[
                    TagBox[
                    GridBox[{{
                    RowBox[{
                    RowBox[{"y", "(", "0", ")"}], "\[LongEqual]", "1"}]}, {
                    RowBox[{
                    RowBox[{
                    SuperscriptBox[
                    "y", "\[Prime]", MultilineFunction -> None], "(", "0", 
                    ")"}], "\[LongEqual]", "0"}]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Right}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                  GridBoxAlignment -> {
                   "Columns" -> {{Right}}, "Rows" -> {{Baseline}}}, 
                  AutoDelete -> False, 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                 "Grid"]}, {
                TagBox[
                 GridBox[{{
                    GraphicsBox[{{{}, {}, 
                    TagBox[{
                    Directive[
                    Opacity[1.], 
                    RGBColor[0.24720000000000014`, 0.24, 0.6], 
                    AbsoluteThickness[1]], 
                    LineBox[CompressedData["
1:eJxdink0FAobh4dCDHKpULlGZYtqLMMQva99XzMz7idkmSKdyhxKpaQsk1JX
qitKi5u9lFu2rgbZb7Jde/YwhqwZS8Xn+/f7nfOc5zzn/JR8T7syBQkEQuQ6
//P/T7P77xpv5tKh2lBTdaN1NyQsrPcmGBpY7SWu2/lMZ603Uw5+dimShv3l
wJPn99GbqQbsS/cWcv3V4FFLQrc3kwrsURmClz8VfEJsZI4yreHudiQk+FlD
k4ga/yjTHbbZslZ6fdyBtiMt0p8ZANfPcNxOeAWAQnVKHosZBiO5QXdiGGFg
DOYBOUw2ZCZ28Ptt2DBdYsa4dSwJznGJc5oHkuDi2q09/sFZoOB24enaciZM
7ns+7jSRD/U9eQK0gHyw2OcQZrexGH45i9+klIpA/d1TueYsDhjm/zM8hO9h
kNV7qXy+Aj5OkGwPzJdD5l8ZdVMe1XDrViFzZLkSFO9rLE68qwNS8bUeHq8G
REQDRtrGP0LjGNUvMq0exsMiww7oNMGVFt3g8IQGYC97Lkt3NQP8IRzy954m
2Dinmk8ObwWfZnMvelgzcEspQo02bbBFy102eqwFdDIeLGSvtcM+7jEVuvG/
sOqUZtI/1AlOv29wZuW1QY2cKrW+uhsUrB5e6tjeARLWw9KsxM9gUFw3QTnV
Cbo6r3KN7vTBX38+0TLp74K+g71NesYDwMwekCEa9IAR5fSGKPtBGIizcc99
/RnUGXw1ptcQwGR4+oRyH8y73TxuwByGWC6joe9aP1BjQn1G476AjJHnM6/I
Aaio2rpVMH0ETCb3t61QBkEc7/VnVo7C4zbPUvHxQWBFTZ94L8wFGc9ned0v
hoCvp8TNOzQODns1Ow8EDENehqSpRyoPxOu3iB2nfIHNz6T9c4UnwexRQHO8
4AhIEa6xo5lfIdDFnxtfNQKv2ff3F89PASP5rcHpR6OQrES82m80AxyCuWFs
0BgI3IlriBCaBbE9/lK2hlwIr3s+OsKbBSnaq8CLpHHwLLHYKdswBzLLsn12
P8dBz7idLt08D+nO75MX53lQkC+m59r6Dcr89DnDgxNQ0B58qWJgAVpSRYPE
WieBrFNpd1Z+EUzVbG+zhr7CIunEwwXXJRDZQLKQ5E1BnwB97Hr5MqTO/vDd
JzYDEddrMMr6O8Sf6KtuT5uBz9zRNdW2H/Bae3tZjOEs7Cygi8bmrML50p29
cmOz8NtwkJarFQHLnirM774zB0USjr1oL4CU3uDf08znYW9nopdxrCA63vjN
I2bLNygX2+fd1LQBy9aS4zxHvwGb/0JZkSmEQ4sUFqdvAf6z/0HSBU0RfPhq
yi5jkg9HDKtWidtE0fRpTcdloSW43+ezFH2ViNpJiQ+eeS3Dm3Ilobtakkhk
iNyzaFmBkvdOE+PdUng8/O7rCy9+AOH8QxdfggyWAsuyeWQVAk+WLkewt6JI
u5+tdikB37jEOVkryaOZdvHtqnhB3KO952Z3iQLWfaz4N+rzRoyszSdryO5C
RsGHzT+3bcIPnY2lXamqqNSZIN+RKoF0wZB2+QgyxtDuLMlHyGCotchC1oAR
Xt/LIWUPKKKXlSmxbMQIazxX9MpGFLHSYHqig2eEeX4Zsp08RWzaGyglsbDe
+kpGEguK2LMjjhAvaowUE6X71RtJ2BlEon3RNsbsttPIkiehJnXl1WKMMU54
Hp26aEbCyAfVj3i6h3BIoNk/NJmE3h4uu/lZgD/OZat+d1NC2vuy7QXRJtjX
OU4uENqNwTlkCzMrSzznesXLrEYVPeV/LXB2sMR4t9BG5wZVFA8KCPY5bInm
9z7E+bSqYv6Htuab3usdpzVxs18VhVnCMcQwS8yXCXlMXFLFAA1N5ZwsS9RV
KziUo66G3I4wzdjNVjgt5mUZe1sNgzJevDwyaoVDmWp1R46po+bxX0OSqm2Q
pfzmdpKlBupbG5brJTqiaSb5dIooef3HSX6U6ogvny30OG4mI4PcsCie7Yhj
Xy/HCW8l45TAB1+hckcMz/zOuUoiI6dJiug17YjpT9S35OmTUcjN3aHQwQnP
Wri97TlGxt2h5wWzNjnjBmPKL1m1ZGRmTr5y6XFGgcF6jkuKFjZqaFO4ta54
rMTWnMvWQUNXX6uoZldUGbpIj0rQQfsiAxO1bldUeO7mrJasgylbEmXZE66Y
UvtShZ2jg4KPXaIzJQ/jkaEzdzM/6eDDoFtHztIPI6i8CTq7TRdd3pEhefIw
Ssz4OCbn6mKEGzeFT6Gh1aRODn+BgvJ8X+tZpKFW0UvGLEEP/bTk3BftaHgF
mccXiXooq+rBVfalIU80e1F5lx7m8W9US96moSGxv03SSQ+rKm7WK07Q8ETK
eJdijh7u3TbHq8ulY0Ol30rdSX1s5XcG0ovp+PO+3Xn6eX0U4nBaZ6ro6ClN
GZ6J1kf/J4lVTv109MsVa3N6rI8nxeYKi6QZeCHkTE1Riz6+EZQ7ZB/OwDXd
NAd7IyquNcxUVFxnoLfU5ZYKGyr++SOZY/0HA/n+Go3WDCoeFIy8cS2fgUlP
ZVKusagYtksksHCcgdPCaWGFWVR0aKSm5y4yMFqy/W1uIRUXZYb084XcMUf/
ilV+FRWfXKn8Z0rJHdMdA3qmBqm4/dPBTSpkd7yrPiCrMkNF1o1MiVOH3NHv
sbPCqVUqevDal6vt3fFdVKRojbgB0j518cge7mhYErVC3mGA/wXDZbi2
                    "]]}, 
                    Annotation[#, "Charting`Private`Tag$1473855#1"]& ]}}, {
                    GridLines -> Dynamic[
                    Map[{{#, 
                    GrayLevel[0.7]}}& , 
                    MousePosition[{"Graphics", Graphics}, None]]], 
                    Method -> {"GridLinesInFront" -> True}, Axes -> True, 
                    Ticks -> False, AxesStyle -> GrayLevel[0.5], AxesLabel -> 
                    None, Frame -> True, FrameTicks -> False, PlotLabel -> 
                    None, RotateLabel -> False, ImageSize -> {140, Automatic},
                     FrameLabel -> {
                    FormBox["x", TraditionalForm], 
                    FormBox["y", TraditionalForm], None, None}, 
                    DisplayFunction -> Identity, AspectRatio -> 
                    NCache[GoldenRatio^(-1), 0.6180339887498948], 
                    Axes -> {True, True}, AxesLabel -> {
                    FormBox["x", TraditionalForm], 
                    FormBox["y", TraditionalForm]}, AxesOrigin -> {0, 0}, 
                    AxesStyle -> Directive[
                    AbsoluteThickness[0.2]], BaseStyle -> Automatic, 
                    DisplayFunction :> Identity, 
                    FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
                    Directive[
                    AbsoluteThickness[0.2]], 
                    FrameTicks -> {{Automatic, Automatic}, {
                    Automatic, Automatic}}, GridLinesStyle -> Automatic, 
                    Method -> {"ScalingFunctions" -> None}, PlotLabel -> 
                    FormBox[
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"y", "(", "0", ")"}], "\[LongEqual]", "0"}], ",", 
                    RowBox[{
                    RowBox[{
                    SuperscriptBox[
                    "y", "\[Prime]", MultilineFunction -> None], "(", "0", 
                    ")"}], "\[LongEqual]", "1"}]}], "}"}], TraditionalForm], 
                    PlotRange -> {All, All}, PlotRangeClipping -> True, 
                    PlotRangePadding -> {{
                    Scaled[0.05], 
                    Scaled[0.05]}, {
                    Scaled[0.05], 
                    Scaled[0.05]}}, Ticks -> {Automatic, Automatic}}], 
                    "\" \"", 
                    GraphicsBox[{{{}, {}, 
                    TagBox[{
                    Directive[
                    Opacity[1.], 
                    RGBColor[0.24720000000000014`, 0.24, 0.6], 
                    AbsoluteThickness[1]], 
                    LineBox[CompressedData["
1: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
K/Uh5tcwWb//A5AwZy0=
                    "]]}, 
                    Annotation[#, "Charting`Private`Tag$1473877#1"]& ]}}, {
                    GridLines -> Dynamic[
                    Map[{{#, 
                    GrayLevel[0.7]}}& , 
                    MousePosition[{"Graphics", Graphics}, None]]], 
                    Method -> {"GridLinesInFront" -> True}, Axes -> True, 
                    Ticks -> False, AxesStyle -> GrayLevel[0.5], AxesLabel -> 
                    None, Frame -> True, FrameTicks -> False, PlotLabel -> 
                    None, RotateLabel -> False, ImageSize -> {140, Automatic},
                     FrameLabel -> {
                    FormBox["y", TraditionalForm], 
                    FormBox[
                    SuperscriptBox[
                    "y", "\[Prime]", MultilineFunction -> None], 
                    TraditionalForm], None, None}, DisplayFunction -> 
                    Identity, AspectRatio -> 
                    NCache[GoldenRatio^(-1), 0.6180339887498948], 
                    Axes -> {True, True}, AxesLabel -> {
                    FormBox["y", TraditionalForm], 
                    FormBox[
                    SuperscriptBox[
                    "y", "\[Prime]", MultilineFunction -> None], 
                    TraditionalForm]}, AxesOrigin -> {0, 0.249999999203386}, 
                    AxesStyle -> Directive[
                    AbsoluteThickness[0.2]], BaseStyle -> Automatic, 
                    DisplayFunction :> Identity, 
                    FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
                    Directive[
                    AbsoluteThickness[0.2]], 
                    FrameTicks -> {{Automatic, Automatic}, {
                    Automatic, Automatic}}, GridLinesStyle -> Automatic, 
                    Method -> {"ScalingFunctions" -> None}, PlotLabel -> 
                    FormBox[
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"y", "(", "0", ")"}], "\[LongEqual]", "0"}], ",", 
                    RowBox[{
                    RowBox[{
                    SuperscriptBox[
                    "y", "\[Prime]", MultilineFunction -> None], "(", "0", 
                    ")"}], "\[LongEqual]", "1"}]}], "}"}], TraditionalForm], 
                    PlotRange -> {All, All}, PlotRangeClipping -> True, 
                    PlotRangePadding -> {{
                    Scaled[0.05], 
                    Scaled[0.05]}, {
                    Scaled[0.05], 
                    Scaled[0.05]}}, Ticks -> {Automatic, Automatic}}], 
                    "\" \"", 
                    StyleBox[
                    TagBox[
                    GridBox[{{
                    RowBox[{
                    RowBox[{"y", "(", "0", ")"}], "\[LongEqual]", "0"}]}, {
                    RowBox[{
                    RowBox[{
                    SuperscriptBox[
                    "y", "\[Prime]", MultilineFunction -> None], "(", "0", 
                    ")"}], "\[LongEqual]", "1"}]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Right}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                  GridBoxAlignment -> {
                   "Columns" -> {{Right}}, "Rows" -> {{Baseline}}}, 
                  AutoDelete -> False, 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                 "Grid"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
              DefaultBaseStyle -> "Column", 
              GridBoxDividers -> {"Columns" -> {{None}}, "Rows" -> {None, 
                  RGBColor[
                  0.6666666666666666, 0.6666666666666666, 0.6666666666666666],
                   None}}, 
              GridBoxItemSize -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
              GridBoxSpacings -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{2}}}], "Column"], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          CellSize -> {550, Automatic}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,computabledata,formatteddata,formuladata"}]}]}], 
   Typeset`pod7$$ = XMLElement[
   "pod", {"title" -> "Sample solution family", "scanner" -> "ODE", "id" -> 
     "SampleSolutionFamily", "position" -> "700", "error" -> "false", 
     "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["cell", {"compressed" -> True, "string" -> False}, {
         Cell[
          BoxData[
           FormBox[
            TemplateBox[{
              GraphicsBox[{
                AbsoluteThickness[1], {{
                  RGBColor[0.624866, 0.673302, 0.264296], 
                  BSplineCurveBox[CompressedData["
1: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
pYew
                   "]]}, {
                  RGBColor[
                  0.5926051666666666, 0.64554475, 0.29019741666666665`], 
                  BSplineCurveBox[CompressedData["
1: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

                   "]]}, {
                  RGBColor[
                  0.5603443333333334, 0.6177874999999999, 
                   0.31609883333333333`], 
                  BSplineCurveBox[CompressedData["
1:eJxl1nk41Pv7BvCZsY5txpgm62jsRtaEQ/V+iJDKvp8Kx57IkpJsyZKIkq2I
EgmVZDuWYmhFUcpWKRkkRNRpYfz8/v1+/nqu13Vf95/3dT0MrxA7HwIOhyPh
cbj/v+JVdQVqax47dP9dc3N0ZKP/tVH3JdVavbUdLpVeCoHrLp1mHgzTISEC
pWEudt09l89H22nJoiEn0YSKdfsooSwTTU2ksl2p/M+6Tedj6po1EIof6pm/
6sRGrFEjjWMa1oiwU+PYvDMb/Za8QHTWOIh4XWcDUtzYqPctLXSvRgiqyJMe
ajrIRkdO/53upRGHOpMufZQIZKOmvoTmAY1MNHOkb3kgFuvnOKuT1VrFKP8D
f4Z2BdY/WqoN0k1rUGq2Q00CfhLjzMiUCwe2NqHlkXqzAges++/mec9wt6N2
nQLzb2VYOxwmcHfu6ULfvLxSEAfrCI7ZC5bjEyTiJJ32yWYKY1+++JUfrB7U
Pn+jZbIS69pIyxXu3D602Yx34ivXNMaTC1ab0K2XyFHZ5+5DZ6yPco4WRq8M
IBN/YvGDe1iPZeHnhLQG0XjZkdmXAp8xjg70LB7yHkbHGkP+SfbEmthtMM4c
HkVBy0NeTh1YL5GuPGFteY+2XdtXVSQ9g/GX+mzl8MAPiOxH95tMwLo58vMD
lfaPqKZQLpR3GmsJ1Zw7UgKf0ITm7okVyy8Ya7YE1t6LmUAfHunX5zRifco/
NmB6ko3atCSD/BmzGO9s2mn0Om4K3Y+oKffLx9qiIThFW/EzGrWVYTEpcxjn
O1v46rFmUPl+WWZTKtZJe+vvRVyaRbvPtku6keYx1rePG95yeB4FN4TZJGRj
vafjwB0h1QV0bNaHa0LqK8ZvN59J9zReRLzIdjW+Cet3dnWFYa7fkHWlw6+F
9d7/mu9McahIyRJKy/DUnUrEumj7J938P8towVA8Zn4c64/o6WiW+w/0eMTX
Ks5kEWOdsp5zpSv/IX3NmMtfa7HWa2jRGKv4hb51rxVmKn7DePy+6dKdY3/Q
uafjDQUlWDv+YkUb31hFutYeNXa6SxhXlSXdFvu2hravSYipPcc6tOXwv3Ze
eKD/3nB+X9oyxsmPDqqOsQlgU7XQ8tjuO8ZLjmD7sZAbvrj5K8Xo/sBY2m9t
U3EvLzxSjDwoZv8fxv/VauYUARH6bl+hPT7/E2N308nnv+OFwOLQFrk+vd8Y
J8jn3fQ1I8NsdEBsJlrB2GapW/nruk8+nu0UhxXUlnTk9rFdZDib1S96bd3V
8kKvU83JgOthPaozXkG3rpWmVFmSQc/MLWdk5wrK/o838dteMtSeIj9StlhB
z6/uGEp2IoMjr2H0E5sVpDzYpfrUjwzRN4Y85b1WUF6+7nB9GhlILpQsSFpB
TvzVO41ekkFj9K9dCr0raKGpStTdXxT2Vdx49f2fVcQyVZxJqKOAXY/faYe7
HIzNP+/vMamnQGTKh7UNtRzUrBLextVAgVddCmmD604JM+xJaqSAdAet262O
g56LHy5Ma6ZAya1+jmcjByn3zvDntVPgWYOaZngbB82r59FbeiiwxGE9KHnK
QWlvN5ZosSnw0JePW3Wcg6iF9YoDNDEQuhK0c1FsDZU0Hjq1MUYMFt5y2CdO
rKExUY3QMCcqMNO8J5lMHDBaD8w7OFNhd9tzj8J1839OjdV3oUJz9K0JYTUc
lEa8GlxxpcLJI738i+veQk4KTt1PhSn6v6xGdRxMFURplHpTYZeXNWeXNg70
GxuJU2FU8GLhioIMcNAm49NYkUmFdlZw28AuHOxYfOkg/owK2gYJbZLeOHCl
axv0mmyANxIrIlklODApfrmxx5QG5QKxTg8YeIzzeZKJT8xo8GrQ7/h2OTx4
UHvJXbtoQJihlrWsm+DJ8Gi1oIFH1H16kzweXHZrE27voYFZTmT2XUU8EHO8
nXIcaKBEakgsV8WDcPSEXYQ3DdKnXc7ka+OhJ990W8RpGrD4dKKKjPFQU86e
iX9IA5mGwePq67vKsKox+2m1ETzanMyiy/Bgn5xd2H9IHKjCwbkpWwmgWzvM
sxYkDjo/7/vR9QiQgA85uzlYHBQatc3r1+2nkPcl5Yg4JLaf1vqkT4B//t6H
g6PikJskcQsZEiBy03hsfaw4zGp1Wv/ZQYCoR2Jz9efFYWifo2WMBQHicgfC
hZvEgXSoPL7anQDM7w7JdF4JqLwZcbvlFAHEU8dceSskIPzF2GjLKwLc1ZOd
IvJIgapMg43dKS6MOy8oTITySsElNxlP3kQuGDn1hmeETwqCvN8kNq97ot6p
sVJACsxVLXHySVyw7Znvq71kKai4Hf96OYULFLNaly9JScGMw72lyxlcEKW3
hdtWRwoiYxTEfuZzQdeJNwXqHlJgydaMn77DBXtXZVZq26Rgz9lUkzvvuWCh
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
m/w=
                   "]]}, {
                  RGBColor[0.5280835, 0.59003025, 0.34200025], 
                  BSplineCurveBox[CompressedData["
1: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
                   "]]}, {
                  RGBColor[
                  0.4958226666666667, 0.5622729999999999, 0.3679016666666666], 
                  BSplineCurveBox[CompressedData["
1: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
                   "]]}, {
                  RGBColor[
                  0.4635618333333334, 0.53451575, 0.39380308333333336`], 
                  BSplineCurveBox[CompressedData["
1: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
                   "]]}, {
                  RGBColor[0.43130100000000005`, 0.5067585, 0.4197045], 
                  BSplineCurveBox[CompressedData["
1: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
8uZDY8dscsxgWUc+1WadGsr/A0npd7w=
                   "]]}, {
                  RGBColor[
                  0.39904016666666675`, 0.47900125, 0.4456059166666667], 
                  BSplineCurveBox[CompressedData["
1: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
5FV7MVG22jsW5lbsADoXWLluGvoo/w+Oy5Uz
                   "]]}, {
                  RGBColor[
                  0.36677933333333335`, 0.451244, 0.4715073333333333], 
                  BSplineCurveBox[CompressedData["
1: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
                   "]]}, {
                  RGBColor[
                  0.33451850000000005`, 0.42348675, 0.49740874999999996`], 
                  BSplineCurveBox[CompressedData["
1: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
                   "]]}, {
                  RGBColor[
                  0.30225766666666665`, 0.39572949999999996`, 
                   0.5233101666666666], 
                  BSplineCurveBox[CompressedData["
1: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
                   "]]}, {
                  RGBColor[
                  0.26999683333333335`, 0.36797225, 0.5492115833333333], 
                  BSplineCurveBox[CompressedData["
1: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
                   "]]}, {
                  RGBColor[0.237736, 0.340215, 0.575113], 
                  BSplineCurveBox[CompressedData["
1:eJxl1Gk41Pv/BvCZYRjGmDE0ltEwtmEmY1A4qT7vpCKcLGU9JQ4VZZeSLCWU
FC2WiiKUoogsx5al7WS0SIksKVpERxGqMX7+T//fR/f1enA/uq/rZvuGOPsT
cDgcFY/D/V+qlN45z1vYsUZ9RcvvhYVZ9P9t2XHBoNJsYY3u0/d+k4su/MT1
DjehogxxzpO3ixZePB3jLNBAtGeWV1oX7a+HMqyMjNC+Q5vsEhdt/TX2Tj0f
IZ7tf4VSi257Y8nfz9+M4oZOR1HEs+iX2hkZN743EtlJFTFFs6iznxHmwA9B
bQVOGivnZlHo0b/SfPnxyNzzV2r85Cyqe3a4vpufjnpNiO94w1g/wdkdKhNc
Rp5F3p3S7VjPNJRZpFlXIOce8+1fE7FOj0o5s31FHWrEMZSL7bB+fjvbb0yy
BZXzykgPGVhvCSJIttvfQ8d6qKpDQzMYR4rXP23b+ghNxQYsCG9hvVM6QTTT
JkQPV7+aGozBujLKViSZ9Qx1rDhVTrbH+sOknSa62YX+1iRPOLCx3ifelxsj
6kZkyh76f9M/MB7KwE/ICXpQGs9Z3qUT65hAn8uv/XqRGTgLuSVYy3RYvOP2
vkF/jU6jmsNYT1EvPWozHUTX1sSHnfPG+kv1WU5E4FukGYD7O3EV1vVRn+/q
twwj1eEIxFDHWtUgs5wp+x7Nz/iPVyxMY2zUEFhZFTuCvmnpbF54h/WR3XEB
nz6MItmSdpLDY6zX1a2zfBn/EZV1B2bP3cbapiY4xVj3MxqM9ZJqzsU6x81m
p1nbGDrVe/VVygmskxyqqyIvjKNQwhv5+RiszV3ie02DviJ8+KW8hlCs7Vu3
l8sZTCK9+64RrACs+5cdT/NZ+w0R7WZsBf5YDzjfyQ33+I4Ce+Zr9HZiLX38
cph8/hTyC7N0kgzCOm/1++U5v6dRc7T2uosHsR5G/77J8JpBtIbBprBTWJsU
C08VLv7AvbIZoeFNrM1qGvhDJT9Rb1ritFY31u+arafK9/9GppOFzC7iD4y3
/myLWXttHiWMNLqttsO6tDjpluL3BfThMudEeR7WYQ1B/zj74kGsImjol5/B
OPmBt8HQKAFwdk8K3c9hPbUVnIZzJWF/99lPBItZjNV3LWhe7pQCTzNvq1CV
OYxnK40y80AG+iX1fJS1f2LsZf3hya8EOfje7ReVk/0L48Pa2dd3rqfB8Odr
xr+jRRg7TnVw/lt0bAf/1qGDItSUFHpr/wYajJQUm4oXXaYt9/LYRhrUZuz0
wB8SoZtXClNKbWmQc8uORooTobOzUonfHWhg5eC+TPmICD0pWPM62ZUGeEWu
9qpUEeL03DP4dxcNThjH/VFwQYSyc5b3VqfSYLmmw6HeBhFyJZWts+yiQcOv
h5vkcfNosq5UwWu3AoQKyJFf0+dRm7Xu2OE7dPgWYPue9VyM8cbP24RW1XS4
3u3p27foev2IJokaOmR4vZvM7BKjlPCVwqRaOtRXeq6idIvRE5Wg3NR6OujY
sk+KXokRp3OMlN1CBzfVk8qD/WL01TCb1SCkQ9URvf6yT2KU2q+cLxilg7Au
NSUat4CUcqt1uxmKIL3T/VSXYAHl1+45ohyrCG1vLZLyzi2gIQV+WLirEpwh
NgQ3LscBu3H71y1uSkAgis/wVuCA9PlYnLm7EuDapFsvLLow8kWPyEMJFiBy
ZbQZDkxpScHHtimB6Y+uK2YWOPh4Pppf6KcEvuN3NlVZ4sC8tlbmY7gS5K5K
XKiywkHTUv/aknQl+B5evfaFIw7WfOvaovJYCZijY64ngnDgwTK26LRaAsZw
6dtUCQ6sLncpC60ZECih+cZaH49xDjFZ5tF6BgRLHfBtXfQOpU7avQ0M+GLw
cnq1AR4IPuwdjTYM8N9RtNKciwf3TcaEW/YM4MU0beIuw4NMpp9r5hYGWJXQ
4+gCPFBiRpwj/RigukzZ8os5HoQ51qsijzJAv/j+tuaNeKi4OjqWcJ8Bx4PE
woldeDhpV7F+zk4ZuhqHA5Nv4MEl+Wzu8z0qcLyL6eb6BwGWV/YSF/aqQGFx
mcz4og/jQ04sC1aB9/dyHh9eSYBdOtlfUkJVwGokdf9NSwL8/defONinAi8K
5OOIawgQpfkurjpOBUi6W1GdFQGiHyhOVJ9WgVW0X/n69gSIz+qOoNSpQOp8
s/MKbwJwf2xJZkmpwp6yniWEZAKoHBvykCpRhYqjp66mvCLAbTONjzJEJuzM
7Ni++agExu1ndEbCpJiQMfRXIyFJAvqOvCL2STPB8OLeZTWLHql2rb0hywS5
XLr10hQJWPV45wsHGhOqvB46jR+XAN2MxukLTCakHdn0+WS6BESbmUo6mTCh
bzBNfeiCBNw7+Oq84Q4mKFHrl9fflgCH+aWiyiYmMJxMndzfSsCkcOPt9Qnq
0Ky3O9p7rSRIVpXon9JjQUHSnqcqSkSMFcpKk+31WVDZYlY4u+ilaUHKZC4L
hG/iMl4tIQLnlePzY4YssJDMrj2nTARWz/FryctZsPvcDgs6kwjOa4NHT1ix
YEUuh0TXIkKGUcVI43YWWHKNF3QERIjutxmtz2ZB1u5f687bE0HYfV1sJqcB
+riVnPbkRddt2l67oAHZpjbj3jgpQJFBjp2ybDC24EwzydIYix+E5OHl2FBg
QKU7ykkDxSR0iRmFDSGDsl5HKdLAiU5PvkxlQ9gln+AJqjSsDF8fHKnEBk3/
4xdblaShrfColx6LDX5elcrhLGmITkucuGHMhpuxsT1TxtKgHVH108KDDc0N
vLhDHtKQygo8E32DDW35FSurbkgD4dhmm6WuWvDOWTJ3gysJ9v2ZcOywmxbQ
Amru3nAjwcvNuuJRdy1otR9XoXqQgOQlOl7upQW3/1Xc+9qLBLfvG+uu99EC
RlhRVpAPCbyPekce3KsFrluDpa/sJYEwq7qDkqgFT8sDb5omkqCCoqnWV6EF
uWc33BdVkACCu4c1qNpgNVP/YBVVBu5rO7lo92jD0rei32Y9WKvnH6puf60N
j0sP/tnzWgake628/Pq0IX9b3sj+Phmg5g+HXR3QBr8Ixf5/BmTg0UmLTsMR
bcjLOf0TRhb7MoObbL9pw5pMn3mvbzLgx67rqSLrwJLzfXn3ybKLP54467lW
B5z7SvF71soC3qM9nlahA20mlYeWVsgCPf72f3q5uqCO07AyyiVDb5aajtIl
XTBSGwhWv0SGm2pN5fh8XWhp6Psuk0+GMzbkzoFCXbgQ9g33oZAMjSvdtS6U
6kLnLhWLK6VkiMszstdu0AXfq/f0eA1kkJj3tzrQpwv6dGJpfB8ZBl3y8SZq
elAt35ZloSYHL3kaH2mX9ODHQUc645IceLrtdpuv40BBwtoDuH8oGJ+0LNPj
NHCg1z/NmttAgUw/a0+nJg489ODv29JEgQ+fBr9ebeXAXPWIxI1WCpwranzm
+pgDG/3U+jweU6CeYpn+7xsOjBW1Hxa+oUDQCvf632IOdN4TJYjFFOjwvClx
foM+jOX3RV/cIA8uau9DvvTpw2vlGu+JPnlwbKRI2g3ow6N48nf7AXkgpqWR
S4f0F6eonS0bkgdqiOy+vSP60M08ty14RB6Os4qqpyf0IViZkD0zIQ/zAd6y
TLwBBPBrBtTxVEjtYUzc5RiA8/eo4lYOFab/i2WGRxlAs4FEYUQUFV4sbyXX
qnJBZ+9jdr8cDbIvpxRtUefCvNPVCa48DT64P2z7zuLC3mQkiqbSAB47Zwh0
uKDa+XNYhU4DQel8RCWfC038u889lGlAD5lLeLqOC1d+mWz5xKaBLyPxaUgw
F14Wl0RYmNNA5uorf+f7iy6pqrjuS4On+xJsx6N5kGolPjHTSIPpS9UTzw/x
IKq+Y1tAMw0sFE4a1sXzgJQRGNt/lwZcm48JyUk8eH0u7mp7Gw3SOspiuKd5
IG9eeSXzEQ3evRscTy/hQdbkvLtNNw1iNtku7erhQXfVj72fv9BgbVn23BqL
ZXBwTvmFhroCpCeu8lTFG4LfI8e5tASsXXDx1FPShuBy4Jrzw0QF+NVbVECU
NwTbqDCmRIoCtKkhv3k1Q/CZF4jiTioA4WJaDnWFITzbb7Pk2AUF+Mg0Cm8J
MASms1TC2zsK0DsnMe7z0hDWj+344/aYAsyM15mr1fChKWaFJ8WLDvZ55/oy
7/HhoLwPz86XDjRlSZbGCz689nshTA+gg+Tzby88J/kg83DNNcMDdCjX8mZH
84zg5wH9zsZMOuhubvrsW2QEzCVLK4y76HBS5sTWFkcBhDwwTW9xVIRl1NXp
mj4CuL+s6ZGmjyIklUxdLwgTwJjqn+8LwhTBhK1LJ50VgKBZ3Y50VhGiinN+
hPYI4H2CgB/Wowg79mV9ou8yhi9zdZqKu5TAKavlS3KlMVz8MK2dUqkE4z8G
HM7gTICq7ZV8BrcEBtMnB9ycTOCATTvD3WkJ+GccHRUVmYDX8iLWfBHWExHJ
bpUeljDBXZ1d6cHCePXuT6Eu+bYwU8zKctHkYfw/v6ycLA==
                   "]]}}}, PlotLabel -> None, ImageSize -> 240, Axes -> True, 
               PlotRange -> All, AspectRatio -> 
               NCache[GoldenRatio^(-1), 0.6180339887498948], AxesLabel -> {
                 FormBox["x", TraditionalForm], 
                 FormBox["y", TraditionalForm]}, PlotLabel -> FormBox[
                 RowBox[{"{", 
                   RowBox[{
                    RowBox[{"y", "(", "0", ")"}], ",", 
                    RowBox[{
                    SuperscriptBox[
                    "y", "\[Prime]", MultilineFunction -> None], "(", "0", 
                    ")"}]}], "}"}], TraditionalForm]], "\"  \"", 
              StyleBox[
               RowBox[{"\"(\"", "\[NoBreak]", 
                 FormBox[
                  TagBox[
                   FormBox[
                    TemplateBox[{"\"sampling \"", 
                    TemplateBox[{
                    RowBox[{"y", "(", "0", ")"}], "\" and \"", 
                    RowBox[{
                    SuperscriptBox[
                    "y", "\[Prime]", MultilineFunction -> None], "(", "0", 
                    ")"}]}, "RowDefault"]}, "RowDefault"], TraditionalForm], 
                   Format[#, TraditionalForm]& ], TraditionalForm], 
                 "\[NoBreak]", "\")\""}], {
                GrayLevel[0.6], LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
                LineIndent -> 0}, StripOnInput -> False]}, "RowDefault"], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          CellSize -> {550, Automatic}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {"plaintext,computabledata,formatteddata"}]}]}], 
   Typeset`pod8$$ = XMLElement[
   "pod", {"title" -> "Interactive differential equation solution plots", 
     "scanner" -> "ODE", "id" -> 
     "InteractiveDifferentialEquationSolutionPlots", "position" -> "800", 
     "error" -> "false", "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["cell", {"compressed" -> True, "string" -> False}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             FormBox[
              StyleBox[
               
               DynamicModuleBox[{
                CalculateScan`ODEScan`Private`functionOrPhasePlotQ$$ = True, 
                 CalculateScan`ODEScan`Private`iSQ$$ = True, 
                 CalculateUtilities`GraphicsUtilities`Private`more$$ = 
                 False, $CellContext`Y1$$ = 
                 0.7853981633974483, $CellContext`Y2$$ = 0.7853981633974483, 
                 CalculateScan`ODEScan`Private`yTS$$ = {1}, 
                 CalculateScan`ODEScan`Private`yyTS$$ = {1}, 
                 CalculateScan`ODEScan`Private`\[CapitalDelta]x$$ = 
                 0.2575795557527179, Typeset`show$$ = True, 
                 Typeset`bookmarkList$$ = {}, Typeset`bookmarkMode$$ = "Menu",
                  Typeset`animator$$, Typeset`animvar$$ = 1, Typeset`name$$ = 
                 "\"untitled\"", Typeset`specs$$ = {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`more$$], {
                    False, True}}, {{
                    Hold[$CellContext`Y1$$], 0.7853981633974483, 
                    $CellContext`y[0]}, -1.5550883635269477`, 
                    1.5550883635269477`}, {{
                    Hold[$CellContext`Y2$$], 0.7853981633974483, 
                    Derivative[1][$CellContext`y][0]}, -1.5550883635269477`, 
                    1.5550883635269477`}, {{
                    Hold[
                    CalculateScan`ODEScan`Private`functionOrPhasePlotQ$$], 
                    True, "show"}, {
                    True -> "solution or derivatives", False -> 
                    "generalized phase plots"}}, {{
                    Hold[CalculateScan`ODEScan`Private`yTS$$], {1}, ""}, 
                    Dynamic[
                    Map[# -> Dynamic[
                    Style[
                    Derivative[# - 1][$CellContext`y], 
                    If[
                    CalculateScan`ODEScan`Private`functionOrPhasePlotQ$$, 
                    Black, Gray]]]& , 
                    Range[1, 2 + 1]]]}, {{
                    Hold[CalculateScan`ODEScan`Private`yyTS$$], {1}, ""}, 
                    Dynamic[
                    MapIndexed[Part[#2, 1] -> Dynamic[
                    Style[
                    
                    CalculateUtilities`GraphicsUtilities`Private`rowTemplate$\
529036[
                    
                    CalculateUtilities`GraphicsUtilities`Private`localize$\
529036["`1` vs. `2`", 14246], {
                    Derivative[
                    Part[#, 1]][$CellContext`y], 
                    Derivative[
                    Part[#, 2]][$CellContext`y]}], 
                    If[
                    Not[CalculateScan`ODEScan`Private`functionOrPhasePlotQ$$],
                     Black, Gray]]]& , {{0, 1}, {0, 2}, {1, 2}}]]}, {{
                    Hold[CalculateScan`ODEScan`Private`\[CapitalDelta]x$$], 
                    0.2575795557527179, 
                    Subscript["x", "max"]}, -1, 1}, {{
                    Hold[CalculateScan`ODEScan`Private`iSQ$$], True, ""}, {
                    True, False}}, {
                    Hold[
                    Style[
                    Overlay[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource[
                    "WABitmaps", "PodInfoBackground"]]], 
                    Pane[
                    Column[{
                    Row[{
                    Invisible[
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource["WABitmaps", "OrangePlus"]]]], 
                    " ", 
                    Column[{
                    Style["Initial conditions:"], 
                    Manipulate`Place[1], 
                    Manipulate`Place[2]}]}], 
                    PaneSelector[{True -> Grid[{{
                    Button[
                    Row[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource["WABitmaps", "OrangePlus"]]], 
                    " "}], CalculateUtilities`GraphicsUtilities`Private`more$$\
 = False, Appearance -> None, BaseStyle -> {}], 
                    Button[
                    "Fewer controls", 
                    CalculateUtilities`GraphicsUtilities`Private`more$$ = 
                    False, Appearance -> None, BaseStyle -> {}]}, {"", 
                    Item[
                    Column[{
                    Manipulate`Place[3], 
                    Dynamic[
                    If[
                    CalculateScan`ODEScan`Private`functionOrPhasePlotQ$$ === 
                    True, 
                    Manipulate`Place[4], 
                    Manipulate`Place[5]]], 
                    
                    CalculateUtilities`GraphicsUtilities`Private`rowTemplate$\
529036["`1`\[Hyphen]range", {
                    Style["x", Italic]}], 
                    Manipulate`Place[6], 
                    Row[{
                    Manipulate`Place[7], " vertical image stabilization"}]}, 
                    Dividers -> {None, {
                    False, False, True, False, False, True, False, False}}], 
                    ItemSize -> Scaled[1], 
                    Frame -> {None, None, True, None}]}}, FrameStyle -> 
                    GrayLevel[0.9], Alignment -> Left, Spacings -> {0, 0.8}], 
                    False -> Button[
                    Row[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource["WABitmaps", "OrangePlus"]]], 
                    " ", "More controls"}], 
                    CalculateUtilities`GraphicsUtilities`Private`more$$ = 
                    True, Appearance -> None, BaseStyle -> {}]}, 
                    Dynamic[
                    CalculateUtilities`GraphicsUtilities`Private`more$$], 
                    ImageSize -> Automatic]}], 
                    ImageMargins -> {{20, 30}, {10, 10}}]}, {1, 2}, 2, 
                    Alignment -> {Left, Top}]]], 
                    Manipulate`Dump`ThisIsNotAControl}}, Typeset`size$$ = 
                 Automatic, Typeset`update$$ = 0, Typeset`initDone$$ = False, 
                 Typeset`skipInitDone$$ = False, 
                 CalculateUtilities`GraphicsUtilities`Private`more$530204$$ = 
                 False, $CellContext`Y1$530209$$ = 
                 0, $CellContext`Y2$530210$$ = 0, 
                 CalculateScan`ODEScan`Private`functionOrPhasePlotQ$530211$$ = 
                 False, CalculateScan`ODEScan`Private`\[CapitalDelta]x$530212$\
$ = 0, CalculateScan`ODEScan`Private`iSQ$530213$$ = False}, 
                DynamicBox[
                 Manipulate`ManipulateBoxes[
                 2, TraditionalForm, 
                  "Variables" :> {
                   CalculateScan`ODEScan`Private`functionOrPhasePlotQ$$ = 
                    True, CalculateScan`ODEScan`Private`iSQ$$ = True, 
                    CalculateUtilities`GraphicsUtilities`Private`more$$ = 
                    False, $CellContext`Y1$$ = 
                    0.7853981633974483, $CellContext`Y2$$ = 
                    0.7853981633974483, 
                    CalculateScan`ODEScan`Private`yTS$$ = {1}, 
                    CalculateScan`ODEScan`Private`yyTS$$ = {1}, 
                    CalculateScan`ODEScan`Private`\[CapitalDelta]x$$ = 
                    0.2575795557527179}, "ControllerVariables" :> {
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`more$$, 
                    CalculateUtilities`GraphicsUtilities`Private`more$530204$$\
, False], 
                    Hold[$CellContext`Y1$$, $CellContext`Y1$530209$$, 0], 
                    Hold[$CellContext`Y2$$, $CellContext`Y2$530210$$, 0], 
                    Hold[
                    CalculateScan`ODEScan`Private`functionOrPhasePlotQ$$, 
                    CalculateScan`ODEScan`Private`functionOrPhasePlotQ$530211$\
$, False], 
                    Hold[
                    CalculateScan`ODEScan`Private`\[CapitalDelta]x$$, 
                    CalculateScan`ODEScan`Private`\[CapitalDelta]x$530212$$, 
                    0], 
                    Hold[
                    CalculateScan`ODEScan`Private`iSQ$$, 
                    CalculateScan`ODEScan`Private`iSQ$530213$$, False]}, 
                  "OtherVariables" :> {
                   Typeset`show$$, Typeset`bookmarkList$$, 
                    Typeset`bookmarkMode$$, Typeset`animator$$, 
                    Typeset`animvar$$, Typeset`name$$, Typeset`specs$$, 
                    Typeset`size$$, Typeset`update$$, Typeset`initDone$$, 
                    Typeset`skipInitDone$$}, "Body" :> 
                  Module[{}, 
                    CalculateScan`ODEScan`Private`eqs = 
                    Flatten[{{
                    Derivative[1][$CellContext`y][$CellContext`x] + 
                    Derivative[2][$CellContext`y][$CellContext`x] == 
                    Rational[1, 4]}, {}, 
                    CalculateScan`ODEScan`Private`addInits = Thread[{
                    $CellContext`y[0], 
                    Derivative[1][$CellContext`y][0]} == 
                    Tan[{$CellContext`Y1$$, $CellContext`Y2$$}]]}]; 
                    CalculateScan`ODEScan`Private`sol = Quiet[
                    Check[CalculateScan`ODEScan`Private`nds = Quiet[
                    NDSolve[
                    CalculateScan`ODEScan`Private`eqs, $CellContext`y, \
{$CellContext`x, 0, 0 + Sign[CalculateScan`ODEScan`Private`\[CapitalDelta]x$$]
                     Tan[((0.999 Pi)/2) 
                    Abs[CalculateScan`ODEScan`Private`\[CapitalDelta]x$$]^(1/
                    8)]}, PrecisionGoal -> ControlActive[4, Automatic], 
                    AccuracyGoal -> ControlActive[4, Automatic], MaxSteps -> 
                    ControlActive[10^4, 5 10^4]], {
                    MessageName[NDSolve, "mxst"], 
                    MessageName[NDSolve, "ndsz"]}], 
                    CalculateScan`ODEScan`Private`failedNDSolve = 
                    Hold[NDSolve][
                    CalculateScan`ODEScan`Private`eqs, $CellContext`y, \
{$CellContext`x, 0, 0 + Sign[CalculateScan`ODEScan`Private`\[CapitalDelta]x$$]
                     Tan[((0.999 Pi)/2) 
                    Abs[CalculateScan`ODEScan`Private`\[CapitalDelta]x$$]^(1/
                    8)]}]; "$Failed"]]; If[
                    Or[
                    Head[CalculateScan`ODEScan`Private`sol] === NDSolve, 
                    CalculateScan`ODEScan`Private`sol === "$Failed", Chop[
                    Apply[Subtract, 
                    Part[CalculateScan`ODEScan`Private`nds, 1, 1, 2, 1, 1]]] == 
                    0], 
                    
                    CalculateUtilities`GraphicsUtilities`Private`localize$\
529036["could not numerically solve the differential equation for the \
specified parameters", 14242], 
                    CalculateScan`ODEScan`Private`xRanges = 
                    Map[Part[#, 1, 2, 1, 1]& , 
                    CalculateScan`ODEScan`Private`nds]; 
                    CalculateScan`ODEScan`Private`xRange = {
                    0, 0 + Sign[
                    CalculateScan`ODEScan`Private`\[CapitalDelta]x$$] Min[
                    Abs[
                    Apply[
                    Subtract, CalculateScan`ODEScan`Private`xRanges, {1}]]]}; 
                    CalculateScan`ODEScan`Private`IsPurelyRealQ = Not[
                    MemberQ[
                    Cases[CalculateScan`ODEScan`Private`nds, 
                    Blank[List], {0, Infinity}], 
                    Blank[Complex], {0, Infinity}]]; 
                    If[CalculateScan`ODEScan`Private`functionOrPhasePlotQ$$, 
                    If[CalculateScan`ODEScan`Private`yTS$$ === {}, 
                    CalculateScan`ODEScan`Private`yTS$$ = {1}]; 
                    If[CalculateScan`ODEScan`Private`IsPurelyRealQ, 
                    CalculateScan`ODEScan`Private`yPlotRe = Plot[
                    Evaluate[
                    ReplaceAll[
                    Map[Derivative[# - 1][$CellContext`y][$CellContext`x]& , 
                    Union[CalculateScan`ODEScan`Private`yTS$$]], 
                    CalculateScan`ODEScan`Private`nds]], 
                    Evaluate[
                    
                    Flatten[{$CellContext`x, 
                    CalculateScan`ODEScan`Private`xRange}]], PlotLabel -> 
                    Column[CalculateScan`ODEScan`Private`addInits], PlotStyle -> 
                    Part[{
                    Directive[
                    AbsoluteThickness[1], 
                    RGBColor[0.24720000000000014`, 0.24, 0.6]], 
                    Directive[
                    AbsoluteThickness[1], 
                    RGBColor[0.6, 0.24, 0.4428931686004542]], 
                    Directive[
                    AbsoluteThickness[1], 
                    RGBColor[0.6, 0.5470136627990908, 0.24]], 
                    Directive[
                    AbsoluteThickness[1], 
                    RGBColor[0.24, 0.6, 0.33692049419863584`]], 
                    Directive[
                    AbsoluteThickness[1], 
                    RGBColor[0.24, 0.5939180232054561, 0.6]]}, 
                    Union[CalculateScan`ODEScan`Private`yTS$$]], AxesLabel -> {
                    RawBoxes[
                    FormBox["x", TraditionalForm]], 
                    If[
                    Union[CalculateScan`ODEScan`Private`yTS$$] === {
                    1}, $CellContext`y, 
                    Superscript[$CellContext`y, "(n)"]]}, PlotRange -> 
                    Automatic, ImagePadding -> {{10, 30}, {10, 20}}, 
                    ImageSize -> {300, Automatic}]; 
                    CalculateScan`ODEScan`Private`verticalPlotRangeyPlotRe = 
                    Part[
                    FullOptions[
                    CalculateScan`ODEScan`Private`yPlotRe, PlotRange], 2]; If[
                    And[
                    IntervalMemberQ[
                    Interval[
                    CalculateScan`ODEScan`Private`oldVerticalPlotRangeyPlotRe]\
, 
                    Interval[
                    CalculateScan`ODEScan`Private`verticalPlotRangeyPlotRe]], 
                    Abs[
                    Apply[
                    Subtract, 
                    CalculateScan`ODEScan`Private`verticalPlotRangeyPlotRe]]/
                    Abs[
                    Apply[
                    Subtract, 
                    CalculateScan`ODEScan`Private`oldVerticalPlotRangeyPlotRe]\
] > 1/3], Null, CalculateScan`ODEScan`Private`oldVerticalPlotRangeyPlotRe = 
                    CalculateScan`ODEScan`Private`verticalPlotRangeyPlotRe + \
{(-1)/3, 1/3} Abs[
                    Apply[
                    Subtract, 
                    CalculateScan`ODEScan`Private`verticalPlotRangeyPlotRe]]]; 
                    Labeled[
                    If[CalculateScan`ODEScan`Private`iSQ$$, 
                    Show[
                    CalculateScan`ODEScan`Private`yPlotRe, 
                    PlotRange -> {
                    Automatic, 
                    CalculateScan`ODEScan`Private`oldVerticalPlotRangeyPlotRe}\
], CalculateScan`ODEScan`Private`yPlotRe], 
                    
                    Function[{
                    CalculateScan`ODEScan`Private`labels, 
                    CalculateScan`ODEScan`Private`styles}, 
                    Style[
                    Grid[
                    Table[{
                    Graphics[{
                    Part[
                    CalculateScan`ODEScan`Private`styles, 
                    CalculateScan`ODEScan`Private`j], 
                    Line[{{0, 0}, {1, 0}}]}, ImageSize -> {25, 15}, 
                    PlotRange -> {{0, 1}, {(-1)/2, 1/2}}, AspectRatio -> 1/2], 
                    Part[
                    CalculateScan`ODEScan`Private`labels, 
                    CalculateScan`ODEScan`Private`j]}, {
                    CalculateScan`ODEScan`Private`j, 
                    Length[CalculateScan`ODEScan`Private`labels]}], Frame -> 
                    False, Spacings -> {1, 1}], 
                    ImageSizeMultipliers -> {1, 1}]][
                    MapIndexed[Derivative[# - 1][$CellContext`y][
                    RawBoxes[
                    FormBox["x", TraditionalForm]]]& , 
                    Union[CalculateScan`ODEScan`Private`yTS$$]], 
                    MapIndexed[Part[{
                    Directive[
                    AbsoluteThickness[1], 
                    RGBColor[0.24720000000000014`, 0.24, 0.6]], 
                    Directive[
                    AbsoluteThickness[1], 
                    RGBColor[0.6, 0.24, 0.4428931686004542]], 
                    Directive[
                    AbsoluteThickness[1], 
                    RGBColor[0.6, 0.5470136627990908, 0.24]], 
                    Directive[
                    AbsoluteThickness[1], 
                    RGBColor[0.24, 0.6, 0.33692049419863584`]], 
                    Directive[
                    AbsoluteThickness[1], 
                    RGBColor[0.24, 0.5939180232054561, 0.6]]}, 
                    Part[#2, 1]]& , 
                    Union[CalculateScan`ODEScan`Private`yTS$$]]], Right], 
                    CalculateScan`ODEScan`Private`yPlotReIm = Plot[
                    Evaluate[
                    ReplaceAll[
                    Join[
                    Map[Re[
                    Derivative[# - 1][$CellContext`y][$CellContext`x]]& , 
                    Union[CalculateScan`ODEScan`Private`yTS$$]], 
                    Map[Im[
                    Derivative[# - 1][$CellContext`y][$CellContext`x]]& , 
                    Union[CalculateScan`ODEScan`Private`yTS$$]]], 
                    CalculateScan`ODEScan`Private`nds]], 
                    Evaluate[
                    
                    Flatten[{$CellContext`x, 
                    CalculateScan`ODEScan`Private`xRange}]], PlotLabel -> 
                    Column[CalculateScan`ODEScan`Private`addInits], PlotRange -> 
                    Automatic, PlotStyle -> Join[
                    Part[{
                    Directive[
                    AbsoluteThickness[1], 
                    RGBColor[0.24720000000000014`, 0.24, 0.6]], 
                    Directive[
                    AbsoluteThickness[1], 
                    RGBColor[0.6, 0.24, 0.4428931686004542]], 
                    Directive[
                    AbsoluteThickness[1], 
                    RGBColor[0.6, 0.5470136627990908, 0.24]], 
                    Directive[
                    AbsoluteThickness[1], 
                    RGBColor[0.24, 0.6, 0.33692049419863584`]], 
                    Directive[
                    AbsoluteThickness[1], 
                    RGBColor[0.24, 0.5939180232054561, 0.6]]}, 
                    Union[CalculateScan`ODEScan`Private`yTS$$]], 
                    (ReplaceAll[#, Pattern[CalculateScan`ODEScan`Private`col, 
                    Blank[RGBColor]] :> 
                    Apply[RGBColor, 1 - Apply[
                    List, CalculateScan`ODEScan`Private`col]]]& )[
                    Part[{
                    Directive[
                    AbsoluteThickness[1], 
                    RGBColor[0.24720000000000014`, 0.24, 0.6]], 
                    Directive[
                    AbsoluteThickness[1], 
                    RGBColor[0.6, 0.24, 0.4428931686004542]], 
                    Directive[
                    AbsoluteThickness[1], 
                    RGBColor[0.6, 0.5470136627990908, 0.24]], 
                    Directive[
                    AbsoluteThickness[1], 
                    RGBColor[0.24, 0.6, 0.33692049419863584`]], 
                    Directive[
                    AbsoluteThickness[1], 
                    RGBColor[0.24, 0.5939180232054561, 0.6]]}, 
                    Union[CalculateScan`ODEScan`Private`yTS$$]]]], AxesLabel -> {
                    RawBoxes[
                    FormBox["x", TraditionalForm]], 
                    If[
                    Union[CalculateScan`ODEScan`Private`yTS$$] === {
                    1}, $CellContext`y, 
                    Superscript[$CellContext`y, "(n)"]]}, PlotRange -> 
                    Automatic, ImagePadding -> {{10, 30}, {10, 20}}, 
                    ImageSize -> {300, Automatic}]; 
                    CalculateScan`ODEScan`Private`verticalPlotRangeyPlotReIm = 
                    Part[
                    FullOptions[
                    CalculateScan`ODEScan`Private`yPlotReIm, PlotRange], 2]; 
                    If[
                    And[
                    IntervalMemberQ[
                    Interval[
                    CalculateScan`ODEScan`Private`\
oldVerticalPlotRangeyPlotReIm], 
                    Interval[
                    CalculateScan`ODEScan`Private`verticalPlotRangeyPlotReIm]]\
, Abs[
                    Apply[
                    Subtract, 
                    CalculateScan`ODEScan`Private`verticalPlotRangeyPlotReIm]]\
/Abs[
                    Apply[
                    Subtract, 
                    CalculateScan`ODEScan`Private`\
oldVerticalPlotRangeyPlotReIm]] > 1/3], Null, 
                    CalculateScan`ODEScan`Private`\
oldVerticalPlotRangeyPlotReIm = 
                    CalculateScan`ODEScan`Private`verticalPlotRangeyPlotReIm + \
{(-1)/3, 1/3} Abs[
                    Apply[
                    Subtract, 
                    CalculateScan`ODEScan`Private`verticalPlotRangeyPlotReIm]]\
]; Labeled[
                    If[CalculateScan`ODEScan`Private`iSQ$$, 
                    Show[
                    CalculateScan`ODEScan`Private`yPlotReIm, 
                    PlotRange -> {
                    Automatic, 
                    CalculateScan`ODEScan`Private`\
oldVerticalPlotRangeyPlotReIm}], CalculateScan`ODEScan`Private`yPlotReIm], 
                    
                    Function[{
                    CalculateScan`ODEScan`Private`labels, 
                    CalculateScan`ODEScan`Private`styles}, 
                    Style[
                    Grid[
                    Table[{
                    Graphics[{
                    Part[
                    CalculateScan`ODEScan`Private`styles, 
                    CalculateScan`ODEScan`Private`j], 
                    Line[{{0, 0}, {1, 0}}]}, ImageSize -> {25, 15}, 
                    PlotRange -> {{0, 1}, {(-1)/2, 1/2}}, AspectRatio -> 1/2], 
                    Part[CalculateScan`ODEScan`Private`labels, 
                    CalculateScan`ODEScan`Private`j]}, {
                    CalculateScan`ODEScan`Private`j, 
                    Length[CalculateScan`ODEScan`Private`labels]}], Frame -> 
                    False, Spacings -> {1, 1}], 
                    ImageSizeMultipliers -> {1, 1}]][
                    Join[
                    MapIndexed[Re[
                    Derivative[# - 1][$CellContext`y][
                    RawBoxes[
                    FormBox["x", TraditionalForm]]]]& , 
                    Union[CalculateScan`ODEScan`Private`yTS$$]], 
                    MapIndexed[Im[
                    Derivative[# - 1][$CellContext`y][
                    RawBoxes[
                    FormBox["x", TraditionalForm]]]]& , 
                    Union[CalculateScan`ODEScan`Private`yTS$$]]], 
                    Join[
                    MapIndexed[Part[{
                    Directive[
                    AbsoluteThickness[1], 
                    RGBColor[0.24720000000000014`, 0.24, 0.6]], 
                    Directive[
                    AbsoluteThickness[1], 
                    RGBColor[0.6, 0.24, 0.4428931686004542]], 
                    Directive[
                    AbsoluteThickness[1], 
                    RGBColor[0.6, 0.5470136627990908, 0.24]], 
                    Directive[
                    AbsoluteThickness[1], 
                    RGBColor[0.24, 0.6, 0.33692049419863584`]], 
                    Directive[
                    AbsoluteThickness[1], 
                    RGBColor[0.24, 0.5939180232054561, 0.6]]}, 
                    Part[#2, 1]]& , 
                    Union[CalculateScan`ODEScan`Private`yTS$$]], 
                    
                    MapIndexed[(
                    ReplaceAll[#, Pattern[CalculateScan`ODEScan`Private`col, 
                    Blank[RGBColor]] :> 
                    Apply[RGBColor, 1 - Apply[
                    List, CalculateScan`ODEScan`Private`col]]]& )[
                    Part[{
                    Directive[
                    AbsoluteThickness[1], 
                    RGBColor[0.24720000000000014`, 0.24, 0.6]], 
                    Directive[
                    AbsoluteThickness[1], 
                    RGBColor[0.6, 0.24, 0.4428931686004542]], 
                    Directive[
                    AbsoluteThickness[1], 
                    RGBColor[0.6, 0.5470136627990908, 0.24]], 
                    Directive[
                    AbsoluteThickness[1], 
                    RGBColor[0.24, 0.6, 0.33692049419863584`]], 
                    Directive[
                    AbsoluteThickness[1], 
                    RGBColor[0.24, 0.5939180232054561, 0.6]]}, 
                    Part[#2, 1]]]& , 
                    Union[CalculateScan`ODEScan`Private`yTS$$]]]], Right]], 
                    If[CalculateScan`ODEScan`Private`yyTS$$ === {}, 
                    CalculateScan`ODEScan`Private`yyTS$$ = {1}]; 
                    CalculateScan`ODEScan`Private`yyPPlotRe = ParametricPlot[
                    Evaluate[
                    Map[ReplaceAll[#, CalculateScan`ODEScan`Private`nds]& , 
                    Re[
                    Apply[{
                    Derivative[#][$CellContext`y][$CellContext`x], 
                    Derivative[#2][$CellContext`y][$CellContext`x]}& , 
                    Part[{{0, 1}, {0, 2}, {1, 2}}, 
                    Union[CalculateScan`ODEScan`Private`yyTS$$]], {1}]]]], 
                    Evaluate[
                    
                    Flatten[{$CellContext`x, 
                    CalculateScan`ODEScan`Private`xRange}]], AxesLabel -> {
                    Superscript[$CellContext`y, 
                    Row[{"(", 
                    Style["m", Italic], ")"}]], 
                    Superscript[$CellContext`y, 
                    Row[{"(", 
                    Style["n", Italic], ")"}]]}, PlotLabel -> 
                    Column[CalculateScan`ODEScan`Private`addInits], PlotStyle -> 
                    Part[{
                    Directive[
                    AbsoluteThickness[1], 
                    RGBColor[0.24720000000000014`, 0.24, 0.6]], 
                    Directive[
                    AbsoluteThickness[1], 
                    RGBColor[0.6, 0.24, 0.4428931686004542]], 
                    Directive[
                    AbsoluteThickness[1], 
                    RGBColor[0.6, 0.5470136627990908, 0.24]], 
                    Directive[
                    AbsoluteThickness[1], 
                    RGBColor[0.24, 0.6, 0.33692049419863584`]], 
                    Directive[
                    AbsoluteThickness[1], 
                    RGBColor[0.24, 0.5939180232054561, 0.6]]}, 
                    Union[CalculateScan`ODEScan`Private`yyTS$$]], AspectRatio -> 
                    1/GoldenRatio, PlotRange -> Automatic, 
                    ImagePadding -> {{10, 30}, {10, 20}}, 
                    ImageSize -> {300, Automatic}]; 
                    Labeled[CalculateScan`ODEScan`Private`yyPPlotRe, 
                    
                    Function[{
                    CalculateScan`ODEScan`Private`labels, 
                    CalculateScan`ODEScan`Private`styles}, 
                    Style[
                    Grid[
                    Table[{
                    Graphics[{
                    Part[
                    CalculateScan`ODEScan`Private`styles, 
                    CalculateScan`ODEScan`Private`j], 
                    Line[{{0, 0}, {1, 0}}]}, ImageSize -> {25, 15}, 
                    PlotRange -> {{0, 1}, {(-1)/2, 1/2}}, AspectRatio -> 1/2], 
                    Part[
                    CalculateScan`ODEScan`Private`labels, 
                    CalculateScan`ODEScan`Private`j]}, {
                    CalculateScan`ODEScan`Private`j, 
                    Length[CalculateScan`ODEScan`Private`labels]}], Frame -> 
                    False, Spacings -> {1, 1}], 
                    ImageSizeMultipliers -> {1, 1}]][
                    MapIndexed[
                    Map[If[CalculateScan`ODEScan`Private`IsPurelyRealQ, 
                    Identity[#], 
                    Re[#]]& , {
                    Derivative[
                    Part[#, 1]][$CellContext`y], 
                    Derivative[
                    Part[#, 2]][$CellContext`y]}]& , 
                    Part[{{0, 1}, {0, 2}, {1, 2}}, 
                    Union[CalculateScan`ODEScan`Private`yyTS$$]]], 
                    MapIndexed[Part[{
                    Directive[
                    AbsoluteThickness[1], 
                    RGBColor[0.24720000000000014`, 0.24, 0.6]], 
                    Directive[
                    AbsoluteThickness[1], 
                    RGBColor[0.6, 0.24, 0.4428931686004542]], 
                    Directive[
                    AbsoluteThickness[1], 
                    RGBColor[0.6, 0.5470136627990908, 0.24]], 
                    Directive[
                    AbsoluteThickness[1], 
                    RGBColor[0.24, 0.6, 0.33692049419863584`]], 
                    Directive[
                    AbsoluteThickness[1], 
                    RGBColor[0.24, 0.5939180232054561, 0.6]]}, 
                    Part[#2, 1]]& , 
                    Part[{{0, 1}, {0, 2}, {1, 2}}, 
                    Union[CalculateScan`ODEScan`Private`yyTS$$]]]], Right]]]],
                   "Specifications" :> {{
                    CalculateUtilities`GraphicsUtilities`Private`more$$, {
                    False, True}, ControlType -> 
                    None}, {{$CellContext`Y1$$, 0.7853981633974483, 
                    $CellContext`y[0]}, -1.5550883635269477`, 
                    1.5550883635269477`, ControlPlacement -> 
                    1}, {{$CellContext`Y2$$, 0.7853981633974483, 
                    Derivative[1][$CellContext`y][0]}, -1.5550883635269477`, 
                    1.5550883635269477`, ControlPlacement -> 2}, {{
                    CalculateScan`ODEScan`Private`functionOrPhasePlotQ$$, 
                    True, "show"}, {
                    True -> "solution or derivatives", False -> 
                    "generalized phase plots"}, ControlPlacement -> 3}, {{
                    CalculateScan`ODEScan`Private`yTS$$, {1}, ""}, 
                    Dynamic[
                    Map[# -> Dynamic[
                    Style[
                    Derivative[# - 1][$CellContext`y], 
                    If[
                    CalculateScan`ODEScan`Private`functionOrPhasePlotQ$$, 
                    Black, Gray]]]& , 
                    Range[1, 2 + 1]]], ControlType -> CheckboxBar, 
                    ContinuousAction -> False, ControlPlacement -> 4}, {{
                    CalculateScan`ODEScan`Private`yyTS$$, {1}, ""}, 
                    Dynamic[
                    MapIndexed[Part[#2, 1] -> Dynamic[
                    Style[
                    
                    CalculateUtilities`GraphicsUtilities`Private`rowTemplate$\
529036[
                    
                    CalculateUtilities`GraphicsUtilities`Private`localize$\
529036["`1` vs. `2`", 14246], {
                    Derivative[
                    Part[#, 1]][$CellContext`y], 
                    Derivative[
                    Part[#, 2]][$CellContext`y]}], 
                    If[
                    Not[CalculateScan`ODEScan`Private`functionOrPhasePlotQ$$],
                     Black, Gray]]]& , {{0, 1}, {0, 2}, {1, 2}}]], 
                    ControlType -> CheckboxBar, ContinuousAction -> False, 
                    ControlPlacement -> 5}, {{
                    CalculateScan`ODEScan`Private`\[CapitalDelta]x$$, 
                    0.2575795557527179, 
                    Subscript["x", "max"]}, -1, 1, ControlPlacement -> 6}, {{
                    CalculateScan`ODEScan`Private`iSQ$$, True, ""}, {
                    True, False}, ControlPlacement -> 7}, 
                    Style[
                    Overlay[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource[
                    "WABitmaps", "PodInfoBackground"]]], 
                    Pane[
                    Column[{
                    Row[{
                    Invisible[
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource["WABitmaps", "OrangePlus"]]]], 
                    " ", 
                    Column[{
                    Style["Initial conditions:"], 
                    Manipulate`Place[1], 
                    Manipulate`Place[2]}]}], 
                    PaneSelector[{True -> Grid[{{
                    Button[
                    Row[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource["WABitmaps", "OrangePlus"]]], 
                    " "}], CalculateUtilities`GraphicsUtilities`Private`more$$\
 = False, Appearance -> None, BaseStyle -> {}], 
                    Button[
                    "Fewer controls", 
                    CalculateUtilities`GraphicsUtilities`Private`more$$ = 
                    False, Appearance -> None, BaseStyle -> {}]}, {"", 
                    Item[
                    Column[{
                    Manipulate`Place[3], 
                    Dynamic[
                    If[
                    CalculateScan`ODEScan`Private`functionOrPhasePlotQ$$ === 
                    True, 
                    Manipulate`Place[4], 
                    Manipulate`Place[5]]], 
                    
                    CalculateUtilities`GraphicsUtilities`Private`rowTemplate$\
529036["`1`\[Hyphen]range", {
                    Style["x", Italic]}], 
                    Manipulate`Place[6], 
                    Row[{
                    Manipulate`Place[7], " vertical image stabilization"}]}, 
                    Dividers -> {None, {
                    False, False, True, False, False, True, False, False}}], 
                    ItemSize -> Scaled[1], 
                    Frame -> {None, None, True, None}]}}, FrameStyle -> 
                    GrayLevel[0.9], Alignment -> Left, Spacings -> {0, 0.8}], 
                    False -> Button[
                    Row[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource["WABitmaps", "OrangePlus"]]], 
                    " ", "More controls"}], 
                    CalculateUtilities`GraphicsUtilities`Private`more$$ = 
                    True, Appearance -> None, BaseStyle -> {}]}, 
                    Dynamic[
                    CalculateUtilities`GraphicsUtilities`Private`more$$], 
                    ImageSize -> Automatic]}], 
                    ImageMargins -> {{20, 30}, {10, 10}}]}, {1, 2}, 2, 
                    Alignment -> {Left, Top}]]}, 
                  "Options" :> {
                   ControlPlacement -> Bottom, 
                    FrameMargins -> {{0, 0}, {0, 10}}, Paneled -> False, 
                    AppearanceElements -> {}, 
                    LabelStyle -> {
                    "DialogStyle", FontColor -> GrayLevel[0.25]}}, 
                  "DefaultOptions" :> {}], SingleEvaluation -> True], 
                Initialization :> ({None, 
                   ReleaseHold[
                    Uncompress[
                    "6:eJztVm1v0zAQbinv7+MfIPEZwQZISEiIvTAmDShJ+\
d5b7DQWrh1sZxv8efDZTdKsXaWYDtCUfjjVl+bx3XPPXe/xkYzSfq/X01et+SA5SW/\
g6ZE1O3Kay0KQvdNcUa2ZFOkVfHbbmpiaXcrhByXed92a91JNwfjzG3wfeFJwMPSrYZwZRvV4X0Ges\
UTXnqFix/YnYy4T4OwnffJy8/\
WzrVceBUMZgjFUCb3VFjHPFGia9hDomjXbHMQ3f9woj58KzmP6vaAiofqB9Y4UEAsjBXBMJ/\
jWS03UXczLgCCgyIWz5MS53fYCbRQTkxGd5vjGuVw9b4sLaqI9NfdKalbpx0d/Ex/\
I2IXkPS5nd3b8hYVxudg7K6p/Tt0Az2/\
bwit5spQ3TO8dR9rAsGOqF9l82rpKnpCqZV3wM6ouaLasNcbzJ0z9j3TItFkMY7NtGHR6ZCu8XHmL8\
C/awsscW34m7fvWfPaOEnDZZKjk9lGSgs+\
iaKY88AJtn67OrcNj3Kn4jtEZUsEKJ7Jxlt3iuuNhBV7vCDHWbrwG6Yh6AkQ0p9ZFHLe7bMLMTgYKE\
gs8u65f9thI1qEE3Nm+9kwQZseXJ2TV2oTmIJ2rO5gk+/\
JHxa3kcqbJkPcDYeiEqpWiv4X1UZZcQUYyMJIYL2jqNZjDKqkhqGDZD0qQOAfBEJL9sh/3zT+\
crwRSta9QXcqzOHClOQ1Pol8W+\
JCKicma23Xg6ApuW8wmkie16iKWpvPTZn1M95tMN25oDvRQEkJLEj7Quz2h2xP+\
4p6wsAN3S0K3JHRLQrckdEvC/7skuIjxX+k3QhW23g=="]]}; Typeset`initDone$$ = True), 
                DynamicModuleValues :> {}, Deinitialization :> None, 
                UntrackedVariables :> {Typeset`size$$}, 
                SynchronousInitialization -> True, 
                UnsavedVariables :> {Typeset`initDone$$}, 
                UndoTrackedVariables :> {
                 Typeset`show$$, Typeset`bookmarkMode$$}], "Manipulate", 
               Deployed -> True, StripOnInput -> False], TraditionalForm], 
             Manipulate`InterpretManipulate[1]], TraditionalForm]], 
          "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          CellSize -> {550, Automatic}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement["dataformats", {}, {}]}]}], Typeset`pod9$$ = XMLElement[
   "pod", {"title" -> "Possible Lagrangian", "scanner" -> "ODE", "id" -> 
     "PossibleLagrangian", "position" -> "900", "error" -> "false", 
     "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            RowBox[{
              RowBox[{"\[ScriptCapitalL]", "(", 
                RowBox[{
                  SuperscriptBox["y", "\[Prime]", MultilineFunction -> None], 
                  ",", "y", ",", "x"}], ")"}], "\[LongEqual]", 
              RowBox[{
                FractionBox["1", "2"], " ", 
                RowBox[{"(", 
                  RowBox[{
                    RowBox[{
                    SuperscriptBox["\[ExponentialE]", "x"], " ", 
                    SuperscriptBox[
                    RowBox[{
                    SuperscriptBox["y", "\[Prime]"]}], "2"]}], "+", 
                    FractionBox[
                    RowBox[{
                    SuperscriptBox["\[ExponentialE]", "x"], " ", "y"}], 
                    "2"]}], ")"}]}]}], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          CellSize -> {550, Automatic}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,computabledata,formatteddata,formuladata"}]}]}], 
   Typeset`aux1$$ = {True, False, {False}, True}, Typeset`aux2$$ = {
   True, False, {False}, True}, Typeset`aux3$$ = {True, False, {False}, True},
    Typeset`aux4$$ = {True, False, {False}, True}, Typeset`aux5$$ = {
   True, False, {False, False}, True}, Typeset`aux6$$ = {
   True, False, {False}, True}, Typeset`aux7$$ = {True, False, {False}, True},
    Typeset`aux8$$ = {True, False, {False}, True}, Typeset`aux9$$ = {
   True, False, {False}, True}, Typeset`asyncpods$$ = {}, 
   Typeset`nonpods$$ = {}, Typeset`initdone$$ = True, Typeset`queryinfo$$ = {
   "success" -> "true", "error" -> "false", "numpods" -> "9", "datatypes" -> 
    "", "timedout" -> "", "timedoutpods" -> "", "timing" -> "1.035", 
    "parsetiming" -> "0.274", "parsetimedout" -> "false", "recalculate" -> "",
     "id" -> "MSPa799102ea14eh8260eh500005fg066gii123gb2i", "host" -> 
    "http://www4d.wolframalpha.com", "server" -> "41", "related" -> 
    "http://www4d.wolframalpha.com/api/v2/relatedQueries.jsp?id=\
MSPa800102ea14eh8260eh5000065b1caiceh29dd1a2988411736343457746", "version" -> 
    "2.6"}, Typeset`sessioninfo$$ = {
   "TimeZone" -> -5., 
    "Date" -> {2018, 1, 31, 13, 20, 43.3636568`9.389700770431816}, "Line" -> 
    3, "SessionID" -> 21772587419826313706}, Typeset`showpods$$ = {1, 2, 3, 4,
    5, 6, 7, 8, 9}, Typeset`failedpods$$ = {}, Typeset`chosen$$ = {
   "DifferentialEquationSolution", "Differential equation solutions", 2, 2, 
    "Content"}, Typeset`open$$ = True, Typeset`newq$$ = "y'' + y' = 1/4"}, 
   DynamicBox[ToBoxes[
     AlphaIntegration`FormatAlphaResults[
      Dynamic[{
       1, {Typeset`pod1$$, Typeset`pod2$$, Typeset`pod3$$, Typeset`pod4$$, 
         Typeset`pod5$$, Typeset`pod6$$, Typeset`pod7$$, Typeset`pod8$$, 
         Typeset`pod9$$}, {
        Typeset`aux1$$, Typeset`aux2$$, Typeset`aux3$$, Typeset`aux4$$, 
         Typeset`aux5$$, Typeset`aux6$$, Typeset`aux7$$, Typeset`aux8$$, 
         Typeset`aux9$$}, Typeset`chosen$$, Typeset`open$$, 
        Typeset`elements$$, Typeset`q$$, Typeset`opts$$, Typeset`nonpods$$, 
        Typeset`queryinfo$$, Typeset`sessioninfo$$, Typeset`showpods$$, 
        Typeset`failedpods$$, Typeset`newq$$}]], StandardForm],
    ImageSizeCache->{560., {4465., 19.}},
    TrackedSymbols:>{Typeset`showpods$$, Typeset`failedpods$$}],
   DynamicModuleValues:>{},
   Initialization:>If[
     Not[Typeset`initdone$$], Null; WolframAlphaClient`Private`doAsyncUpdates[
       Hold[{
        Typeset`pod1$$, Typeset`pod2$$, Typeset`pod3$$, Typeset`pod4$$, 
         Typeset`pod5$$, Typeset`pod6$$, Typeset`pod7$$, Typeset`pod8$$, 
         Typeset`pod9$$}], Typeset`asyncpods$$, 
       Dynamic[Typeset`failedpods$$]]; Typeset`asyncpods$$ = {}; 
     Typeset`initdone$$ = True],
   SynchronousInitialization->False],
  BaseStyle->{Deployed -> True},
  DeleteWithContents->True,
  Editable->False,
  SelectWithContents->True]], "WolframAlphaShortInput"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   SuperscriptBox["y", "\[Prime]",
    MultilineFunction->None], "+", 
   SuperscriptBox["y", "\[Prime]\[Prime]",
    MultilineFunction->None]}], "\[Equal]", 
  FractionBox["1", "4"]}]], "Output",
 CellChangeTimes->{3.7264116403967133`*^9}]
}, Open  ]]
},
WindowSize->{1034, 817},
WindowMargins->{{293, Automatic}, {58, Automatic}},
FrontEndVersion->"11.0 for Microsoft Windows (64-bit) (September 21, 2016)",
StyleDefinitions->"Default.nb"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[CellGroupData[{
Cell[580, 22, 248207, 4671, 4501, "WolframAlphaShortInput"],
Cell[248790, 4695, 275, 8, 45, "Output"]
}, Open  ]]
}
]
*)

